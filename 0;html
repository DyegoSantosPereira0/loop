<!DOCTYPE html>
<html lang="pt-BR">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Timer com Histórico e Revisões</title>
<style>
  body { font-family: Arial, sans-serif; background-color: #f4f4f4; display:flex; flex-direction:column; justify-content:center; align-items:center; gap:20px; }
  .container, .materias-list, .historico-list { background:white; padding:15px; border-radius:10px; box-shadow:0 4px 8px rgba(0,0,0,0.1); width:350px; display:flex; flex-direction:column; gap:5px; }
  input[type="text"], select, input[type="number"], textarea { padding:10px; font-size:16px; border:1px solid #ccc; border-radius:5px; width:100%; box-sizing:border-box; }
  button { padding:5px 10px; background-color:#4CAF50; color:white; border:none; border-radius:5px; font-size:14px; cursor:pointer; transition: background-color 0.3s; }
  button:hover { background-color:#45a049; }
  .materia-item, .historico-item { display:flex; justify-content:space-between; align-items:center; padding:5px 10px; border-bottom:1px solid #eee; }
  .materia-buttons button { margin-left:5px; padding:3px 8px; font-size:12px; }
  .selected { background-color:#d1e7dd; border-radius:5px; }
  .revisao-container { display:none; flex-direction:column; gap:5px; margin-top:10px; }
</style>
</head>
<body>

<div class="container">
  <input type="text" id="materiaInput" placeholder="Digite a matéria" />
  <label for="peso">Peso:</label>
  <select id="peso">
    <option value="1">1</option>
    <option value="2">2</option>
    <option value="3">3</option>
    <option value="4">4</option>
    <option value="5">5</option>
  </select>
  <button id="addBtn">Adicionar</button>
</div>

<div class="materias-list" id="materiasList"></div>

<div class="time-input">
  <label for="minutes">Minutos:</label>
  <input type="number" id="minutes" min="10" step="10" value="10">
</div>

<div class="timer-container" style="display:flex; align-items:center; gap:10px;">
  <div class="timer" id="timer">00:00</div>
  <select id="timerMateria">
    <option value="">Selecionar matéria</option>
  </select>
</div>

<div class="controls" style="display:flex; gap:10px;">
  <button id="startBtn">Iniciar</button>
  <button id="pauseBtn">Pausar</button>
  <button id="resumeBtn">Continuar</button>
  <button id="stopBtn">Parar</button>
</div>

<div class="historico-list" id="historicoList"></div>

<div id="revisaoModal" class="revisao-container">
  <textarea id="mensagemRevisao" placeholder="Onde você parou..." rows="3"></textarea>
  <label><input type="checkbox" id="marcarRevisao"> Marcar revisão futura</label>
  <button id="salvarRevisao">Salvar</button>
</div>

<script>
const addBtn = document.getElementById('addBtn');
const materiasList = document.getElementById('materiasList');
const timerMateria = document.getElementById('timerMateria');
const historicoList = document.getElementById('historicoList');
const revisaoModal = document.getElementById('revisaoModal');
const mensagemRevisao = document.getElementById('mensagemRevisao');
const marcarRevisao = document.getElementById('marcarRevisao');
const salvarRevisao = document.getElementById('salvarRevisao');

let materias = [];
let materiaAtual = null;

addBtn.addEventListener('click', () => {
  const nome = document.getElementById('materiaInput').value.trim();
  const peso = parseInt(document.getElementById('peso').value, 10);
  if (!nome) return;

  const item = document.createElement('div');
  item.className = 'materia-item';
  const info = document.createElement('span');
  info.textContent = `${nome} (Peso: ${peso})`;

  const buttonsDiv = document.createElement('div');
  const editBtn = document.createElement('button');
  editBtn.textContent = 'Editar';
  editBtn.onclick = () => {
    const novoNome = prompt('Editar matéria:', nome);
    const novoPeso = parseInt(prompt('Editar peso:', peso), 10);
    if (novoNome && novoPeso) {
      info.textContent = `${novoNome} (Peso: ${novoPeso})`;
      const idx = materias.findIndex(m => m.nome === nome);
      materias[idx] = { nome: novoNome, peso: novoPeso, ciclos: materias[idx].ciclos, revisoes: materias[idx].revisoes };
      updateTimerOptions();
    }
  };

  const delBtn = document.createElement('button');
  delBtn.textContent = 'Excluir';
  delBtn.onclick = () => {
    materiasList.removeChild(item);
    materias = materias.filter(m => m.nome !== nome);
    updateTimerOptions();
  };

  buttonsDiv.appendChild(editBtn);
  buttonsDiv.appendChild(delBtn);
  item.appendChild(info);
  item.appendChild(buttonsDiv);
  materiasList.appendChild(item);

  materias.push({ nome, peso, ciclos: 0, revisoes: [] });
  updateTimerOptions();
  document.getElementById('materiaInput').value = '';
});

function updateTimerOptions() {
  timerMateria.innerHTML = '<option value="">Selecionar matéria</option>';
  materias.forEach(m => {
    const option = document.createElement('option');
    option.value = m.nome;
    option.text = `${m.nome} (Peso: ${m.peso})`;
    timerMateria.appendChild(option);
  });
}

function escolherMateriaComHistorico() {
  const k = 2;
  const pesosAjustados = materias.map(m => m.peso * (1 + m.ciclos/k));
  const somaPesos = pesosAjustados.reduce((a,b)=>a+b,0);
  const rand = Math.random() * somaPesos;
  let acumulado = 0;
  for (let i=0;i<materias.length;i++){
    acumulado += pesosAjustados[i];
    if(rand<=acumulado){
      materias.forEach((m,j)=> { m.ciclos += (i===j ? 0 : 1); });
      materias[i].ciclos=0;
      return materias[i].nome;
    }
  }
  return null;
}

let totalSeconds=0;
let remainingSeconds=0;
let interval=null;

function updateDisplay(){
  let mins=String(Math.floor(remainingSeconds/60)).padStart(2,'0');
  let secs=String(remainingSeconds%60).padStart(2,'0');
  document.getElementById('timer').textContent=`${mins}:${secs}`;
}

function adicionarHistorico(materiaObj, mensagem=null){
  const hist=document.createElement('div');
  hist.className='historico-item';
  let texto=`${new Date().toLocaleTimeString()}: ${materiaObj.nome}`;
  if(mensagem) texto+=` - ${mensagem}`;
  if(materiaObj.revisoes && materiaObj.revisoes.length>0){
    texto+=` | Revisões: ${materiaObj.revisoes.map(d=>d.toLocaleDateString()).join(', ')}`;
  }
  hist.textContent=texto;
  historicoList.prepend(hist);
}

function mostrarModal(){ revisaoModal.style.display='flex'; }
function esconderModal(){ revisaoModal.style.display='none'; }

function salvarRevisaoFunc(){
  if(!materiaAtual) return;
  const materiaObj = materias.find(m=>m.nome===materiaAtual);
  if(!materiaObj) return;

  const hoje = new Date();

  // Adiciona a data do dia de hoje sem remover datas anteriores
  materiaObj.revisoes.push(hoje);

  // Adiciona revisões futuras se marcado
  if(marcarRevisao.checked){
    materiaObj.revisoes.push(
      new Date(hoje.getTime()+1*24*60*60*1000),
      new Date(hoje.getTime()+15*24*60*60*1000),
      new Date(hoje.getTime()+30*24*60*60*1000),
      new Date(hoje.getTime()+45*24*60*60*1000)
    );
  }

  adicionarHistorico(materiaObj, mensagemRevisao.value);
  esconderModal();
  mensagemRevisao.value='';
  marcarRevisao.checked=false;
}

salvarRevisao.addEventListener('click', salvarRevisaoFunc);

function iniciarTimer(){
  let minutes=parseInt(document.getElementById('minutes').value,10);
  totalSeconds=minutes*60;
  remainingSeconds=totalSeconds;
  materiaAtual=escolherMateriaComHistorico();
  if(materiaAtual){ timerMateria.value=materiaAtual; }
  updateDisplay();
  clearInterval(interval);
  interval=setInterval(()=>{
    if(remainingSeconds>0){ remainingSeconds--; updateDisplay(); }
    else { clearInterval(interval); mostrarModal(); }
  },1000);
}

document.getElementById('startBtn').addEventListener('click',iniciarTimer);
document.getElementById('pauseBtn').addEventListener('click',()=>{ clearInterval(interval); mostrarModal(); });
document.getElementById('resumeBtn').addEventListener('click',()=>{
  esconderModal();
  clearInterval(interval);
  interval=setInterval(()=>{
    if(remainingSeconds>0){ remainingSeconds--; updateDisplay(); }
    else{ clearInterval(interval); mostrarModal(); }
  },1000);
});
document.getElementById('stopBtn').addEventListener('click',()=>{ clearInterval(interval); remainingSeconds=0; updateDisplay(); mostrarModal(); });

</script>
</body>
</html>


#############################################################################


<!DOCTYPE html>
<html lang="pt-BR">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Timer com Histórico e Revisões</title>
<style>
  body { font-family: Arial, sans-serif; background-color: #f4f4f4; display:flex; flex-direction:column; justify-content:center; align-items:center; gap:20px; }
  .container, .materias-list, .historico-list, .revisoes-hoje-list { background:white; padding:15px; border-radius:10px; box-shadow:0 4px 8px rgba(0,0,0,0.1); width:350px; display:flex; flex-direction:column; gap:5px; }
  input[type="text"], select, input[type="number"], textarea { padding:10px; font-size:16px; border:1px solid #ccc; border-radius:5px; width:100%; box-sizing:border-box; }
  button { padding:5px 10px; background-color:#4CAF50; color:white; border:none; border-radius:5px; font-size:14px; cursor:pointer; transition: background-color 0.3s; }
  button:hover { background-color:#45a049; }
  .materia-item, .historico-item, .revisao-hoje-item { display:flex; justify-content:space-between; align-items:center; padding:5px 10px; border-bottom:1px solid #eee; }
  .materia-buttons button { margin-left:5px; padding:3px 8px; font-size:12px; }
  .selected { background-color:#d1e7dd; border-radius:5px; }
  .revisao-container { display:none; flex-direction:column; gap:5px; margin-top:10px; width:100%; }
</style>
</head>
<body>

<div class="container">
  <input type="text" id="materiaInput" placeholder="Digite a matéria" />
  <label for="peso">Peso:</label>
  <select id="peso">
    <option value="1">1</option>
    <option value="2">2</option>
    <option value="3">3</option>
    <option value="4">4</option>
    <option value="5">5</option>
  </select>
  <button id="addBtn">Adicionar</button>
</div>

<div class="materias-list" id="materiasList"></div>

<div class="time-input">
  <label for="minutes">Minutos:</label>
  <input type="number" id="minutes" min="10" step="10" value="10">
</div>

<div class="timer-container" style="display:flex; gap:10px; align-items:center;">
  <div class="timer" id="timer">00:00</div>
  <select id="timerMateria">
    <option value="">Selecionar matéria</option>
  </select>
</div>

<div class="controls" style="display:flex; gap:10px;">
  <button id="startBtn">Iniciar</button>
  <button id="pauseBtn">Pausar</button>
  <button id="resumeBtn">Continuar</button>
  <button id="stopBtn">Parar</button>
</div>

<!-- Modal de revisão abaixo dos botões -->
<div id="revisaoModal" class="revisao-container">
  <textarea id="mensagemRevisao" placeholder="Onde você parou..." rows="3"></textarea>
  <label><input type="checkbox" id="marcarRevisao"> Marcar revisão futura</label>
  <button id="salvarRevisao">Salvar</button>
</div>

<div class="historico-list" id="historicoList"></div>

<!-- Revisões de hoje -->
<div class="revisoes-hoje-list" id="revisoesHojeList">
  <h3>Revisões de hoje</h3>
</div>

<script>
const addBtn = document.getElementById('addBtn');
const materiasList = document.getElementById('materiasList');
const timerMateria = document.getElementById('timerMateria');
const historicoList = document.getElementById('historicoList');
const revisaoModal = document.getElementById('revisaoModal');
const mensagemRevisao = document.getElementById('mensagemRevisao');
const marcarRevisao = document.getElementById('marcarRevisao');
const salvarRevisao = document.getElementById('salvarRevisao');
const revisoesHojeList = document.getElementById('revisoesHojeList');

let materias = [];
let materiaAtual = null;
let totalSeconds=0;
let remainingSeconds=0;
let interval=null;

addBtn.addEventListener('click', () => {
  const nome = document.getElementById('materiaInput').value.trim();
  const peso = parseInt(document.getElementById('peso').value, 10);
  if (!nome) return;

  const item = document.createElement('div');
  item.className = 'materia-item';
  const info = document.createElement('span');
  info.textContent = `${nome} (Peso: ${peso})`;

  const buttonsDiv = document.createElement('div');
  const editBtn = document.createElement('button');
  editBtn.textContent = 'Editar';
  editBtn.onclick = () => {
    const novoNome = prompt('Editar matéria:', nome);
    const novoPeso = parseInt(prompt('Editar peso:', peso), 10);
    if (novoNome && novoPeso) {
      info.textContent = `${novoNome} (Peso: ${novoPeso})`;
      const idx = materias.findIndex(m => m.nome === nome);
      materias[idx] = { nome: novoNome, peso: novoPeso, ciclos: materias[idx].ciclos, revisoes: materias[idx].revisoes };
      updateTimerOptions();
    }
  };

  const delBtn = document.createElement('button');
  delBtn.textContent = 'Excluir';
  delBtn.onclick = () => {
    materiasList.removeChild(item);
    materias = materias.filter(m => m.nome !== nome);
    updateTimerOptions();
  };

  buttonsDiv.appendChild(editBtn);
  buttonsDiv.appendChild(delBtn);
  item.appendChild(info);
  item.appendChild(buttonsDiv);
  materiasList.appendChild(item);

  materias.push({ nome, peso, ciclos: 0, revisoes: [] });
  updateTimerOptions();
  document.getElementById('materiaInput').value = '';
});

function updateTimerOptions() {
  timerMateria.innerHTML = '<option value="">Selecionar matéria</option>';
  materias.forEach(m => {
    const option = document.createElement('option');
    option.value = m.nome;
    option.text = `${m.nome} (Peso: ${m.peso})`;
    timerMateria.appendChild(option);
  });
}

function escolherMateriaComHistorico() {
  const k = 2;
  const pesosAjustados = materias.map(m => m.peso * (1 + m.ciclos/k));
  const somaPesos = pesosAjustados.reduce((a,b)=>a+b,0);
  const rand = Math.random() * somaPesos;
  let acumulado = 0;
  for (let i=0;i<materias.length;i++){
    acumulado += pesosAjustados[i];
    if(rand<=acumulado){
      materias.forEach((m,j)=> { m.ciclos += (i===j ? 0 : 1); });
      materias[i].ciclos=0;
      return materias[i].nome;
    }
  }
  return null;
}

function updateDisplay(){
  let mins=String(Math.floor(remainingSeconds/60)).padStart(2,'0');
  let secs=String(remainingSeconds%60).padStart(2,'0');
  document.getElementById('timer').textContent=`${mins}:${secs}`;
}

function adicionarHistorico(materiaObj, mensagem=null){
  const hist=document.createElement('div');
  hist.className='historico-item';
  let texto=`${new Date().toLocaleTimeString()}: ${materiaObj.nome}`;
  if(mensagem) texto+=` - ${mensagem}`;
  if(materiaObj.revisoes && materiaObj.revisoes.length>0){
    texto+=` | Revisões: ${materiaObj.revisoes.map(d=>d.toLocaleDateString()).join(', ')}`;
  }
  hist.textContent=texto;
  historicoList.prepend(hist);
}

function atualizarRevisoesHoje() {
  const hoje = new Date().toDateString();
  revisoesHojeList.innerHTML = '<h3>Revisões de hoje</h3>'; // reset

  materias.forEach(m => {
    const revisoesDoDia = m.revisoes.filter(d => new Date(d).toDateString() === hoje);
    revisoesDoDia.forEach(d => {
      const item = document.createElement('div');
      item.className = 'revisao-hoje-item';
      item.innerHTML = `
        ${m.nome} - ${new Date(d).toLocaleTimeString()}
        <select class="tempoRevisao">
          ${[...Array(12)].map((_,i)=>`<option value="${(i+1)*10}">${(i+1)*10} min</option>`).join('')}
        </select>
        <button class="iniciarRevisao">Iniciar</button>
      `;
      revisoesHojeList.appendChild(item);

      // Adiciona evento para o botão iniciar dessa revisão
      item.querySelector('.iniciarRevisao').onclick = () => {
        const tempoSelecionado = parseInt(item.querySelector('.tempoRevisao').value,10);
        iniciarTimerRevisao(m.nome, tempoSelecionado);
      };
    });
  });
}

function mostrarModal(){ revisaoModal.style.display='flex'; }
function esconderModal(){ revisaoModal.style.display='none'; }

function salvarRevisaoFunc(){
  if(!materiaAtual) return;
  const materiaObj = materias.find(m=>m.nome===materiaAtual);
  if(!materiaObj) return;

  const hoje = new Date();

  materiaObj.revisoes.push(hoje);

  if(marcarRevisao.checked){
    materiaObj.revisoes.push(
        new Date(hoje.getTime()+0*24*60*60*1000),
        new Date(hoje.getTime()+1*24*60*60*1000),
        new Date(hoje.getTime()+15*24*60*60*1000),
        new Date(hoje.getTime()+30*24*60*60*1000),
        new Date(hoje.getTime()+45*24*60*60*1000)
    );
  }

  adicionarHistorico(materiaObj, mensagemRevisao.value);
  atualizarRevisoesHoje();
  esconderModal();
  mensagemRevisao.value='';
  marcarRevisao.checked=false;
}

salvarRevisao.addEventListener('click', salvarRevisaoFunc);

function iniciarTimer(){
  let minutes=parseInt(document.getElementById('minutes').value,10);
  totalSeconds=minutes*60;
  remainingSeconds=totalSeconds;
  materiaAtual=escolherMateriaComHistorico();
  if(materiaAtual){ timerMateria.value=materiaAtual; }
  updateDisplay();
  clearInterval(interval);
  interval=setInterval(()=>{
    if(remainingSeconds>0){ remainingSeconds--; updateDisplay(); }
    else { clearInterval(interval); mostrarModal(); }
  },1000);
}

// Função para iniciar timer de revisão específica
function iniciarTimerRevisao(nomeMateria, minutos){
  totalSeconds=minutos*60;
  remainingSeconds=totalSeconds;
  materiaAtual=nomeMateria;
  timerMateria.value=nomeMateria;
  updateDisplay();
  clearInterval(interval);
  interval=setInterval(()=>{
    if(remainingSeconds>0){ remainingSeconds--; updateDisplay(); }
    else{ clearInterval(interval); mostrarModal(); }
  },1000);
}

document.getElementById('startBtn').addEventListener('click',iniciarTimer);
document.getElementById('pauseBtn').addEventListener('click',()=>{ clearInterval(interval); mostrarModal(); });
document.getElementById('resumeBtn').addEventListener('click',()=>{
  esconderModal();
  clearInterval(interval);
  interval=setInterval(()=>{
    if(remainingSeconds>0){ remainingSeconds--; updateDisplay(); }
    else{ clearInterval(interval); mostrarModal(); }
  },1000);
});
document.getElementById('stopBtn').addEventListener('click',()=>{ clearInterval(interval); remainingSeconds=0; updateDisplay(); mostrarModal(); });

</script>
</body>
</html>

#############################################################################

<!DOCTYPE html>
<html lang="pt-BR">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Timer com Histórico e Revisões</title>
<style>
  body { font-family: Arial, sans-serif; background-color: #f4f4f4; display:flex; flex-direction:column; justify-content:center; align-items:center; gap:20px; }
  .container, .materias-list, .historico-list, .revisoes-hoje-list { background:white; padding:15px; border-radius:10px; box-shadow:0 4px 8px rgba(0,0,0,0.1); width:350px; display:flex; flex-direction:column; gap:5px; }
  input[type="text"], select, input[type="number"], textarea { padding:10px; font-size:16px; border:1px solid #ccc; border-radius:5px; width:100%; box-sizing:border-box; }
  button { padding:5px 10px; background-color:#4CAF50; color:white; border:none; border-radius:5px; font-size:14px; cursor:pointer; transition: background-color 0.3s; }
  button:hover { background-color:#45a049; }
  .materia-item, .historico-item, .revisao-hoje-item { display:flex; flex-direction:column; justify-content:space-between; padding:5px 10px; border-bottom:1px solid #eee; }
  .materia-buttons button { margin-left:5px; padding:3px 8px; font-size:12px; }
  .selected { background-color:#d1e7dd; border-radius:5px; }
  .revisao-container { display:none; flex-direction:column; gap:5px; margin-top:10px; width:100%; }
  .timer-item { font-size:14px; font-weight:bold; margin-top:5px; }
</style>
</head>
<body>

<div class="container">
  <input type="text" id="materiaInput" placeholder="Digite a matéria" />
  <label for="peso">Peso:</label>
  <select id="peso">
    <option value="1">1</option>
    <option value="2">2</option>
    <option value="3">3</option>
    <option value="4">4</option>
    <option value="5">5</option>
  </select>
  <button id="addBtn">Adicionar</button>
</div>

<div class="materias-list" id="materiasList"></div>

<div class="time-input">
  <label for="minutes">Minutos:</label>
  <input type="number" id="minutes" min="10" step="10" value="10">
</div>

<div class="timer-container" style="display:flex; gap:10px; align-items:center;">
  <div class="timer" id="timer">00:00</div>
  <select id="timerMateria">
    <option value="">Selecionar matéria</option>
  </select>
</div>

<div class="controls" style="display:flex; gap:10px;">
  <button id="startBtn">Iniciar</button>
  <button id="pauseBtn">Pausar</button>
  <button id="resumeBtn">Continuar</button>
  <button id="stopBtn">Parar</button>
</div>

<div id="revisaoModal" class="revisao-container">
  <textarea id="mensagemRevisao" placeholder="Onde você parou..." rows="3"></textarea>
  <label><input type="checkbox" id="marcarRevisao"> Marcar revisão futura</label>
  <button id="salvarRevisao">Salvar</button>
</div>

<div class="historico-list" id="historicoList"></div>

<div class="revisoes-hoje-list" id="revisoesHojeList">
  <h3>Revisões de hoje</h3>
</div>

<script>
const addBtn = document.getElementById('addBtn');
const materiasList = document.getElementById('materiasList');
const timerMateria = document.getElementById('timerMateria');
const historicoList = document.getElementById('historicoList');
const revisaoModal = document.getElementById('revisaoModal');
const mensagemRevisao = document.getElementById('mensagemRevisao');
const marcarRevisao = document.getElementById('marcarRevisao');
const salvarRevisao = document.getElementById('salvarRevisao');
const revisoesHojeList = document.getElementById('revisoesHojeList');

let materias = [];
let materiaAtual = null;
let totalSeconds=0;
let remainingSeconds=0;
let interval=null;

addBtn.addEventListener('click', () => {
  const nome = document.getElementById('materiaInput').value.trim();
  const peso = parseInt(document.getElementById('peso').value, 10);
  if (!nome) return;

  const item = document.createElement('div');
  item.className = 'materia-item';
  const info = document.createElement('span');
  info.textContent = `${nome} (Peso: ${peso})`;

  const buttonsDiv = document.createElement('div');
  const editBtn = document.createElement('button');
  editBtn.textContent = 'Editar';
  editBtn.onclick = () => {
    const novoNome = prompt('Editar matéria:', nome);
    const novoPeso = parseInt(prompt('Editar peso:', peso), 10);
    if (novoNome && novoPeso) {
      info.textContent = `${novoNome} (Peso: ${novoPeso})`;
      const idx = materias.findIndex(m => m.nome === nome);
      materias[idx] = { nome: novoNome, peso: novoPeso, ciclos: materias[idx].ciclos, revisoes: materias[idx].revisoes };
      updateTimerOptions();
    }
  };

  const delBtn = document.createElement('button');
  delBtn.textContent = 'Excluir';
  delBtn.onclick = () => {
    materiasList.removeChild(item);
    materias = materias.filter(m => m.nome !== nome);
    updateTimerOptions();
  };

  buttonsDiv.appendChild(editBtn);
  buttonsDiv.appendChild(delBtn);
  item.appendChild(info);
  item.appendChild(buttonsDiv);
  materiasList.appendChild(item);

  materias.push({ nome, peso, ciclos: 0, revisoes: [] });
  updateTimerOptions();
  document.getElementById('materiaInput').value = '';
});

function updateTimerOptions() {
  timerMateria.innerHTML = '<option value="">Selecionar matéria</option>';
  materias.forEach(m => {
    const option = document.createElement('option');
    option.value = m.nome;
    option.text = `${m.nome} (Peso: ${m.peso})`;
    timerMateria.appendChild(option);
  });
}

function escolherMateriaComHistorico() {
  const k = 2;
  const pesosAjustados = materias.map(m => m.peso * (1 + m.ciclos/k));
  const somaPesos = pesosAjustados.reduce((a,b)=>a+b,0);
  const rand = Math.random() * somaPesos;
  let acumulado = 0;
  for (let i=0;i<materias.length;i++){
    acumulado += pesosAjustados[i];
    if(rand<=acumulado){
      materias.forEach((m,j)=> { m.ciclos += (i===j ? 0 : 1); });
      materias[i].ciclos=0;
      return materias[i].nome;
    }
  }
  return null;
}

function updateDisplay(){
  let mins=String(Math.floor(remainingSeconds/60)).padStart(2,'0');
  let secs=String(remainingSeconds%60).padStart(2,'0');
  document.getElementById('timer').textContent=`${mins}:${secs}`;
}

function adicionarHistorico(materiaObj, mensagem=null){
  const hist=document.createElement('div');
  hist.className='historico-item';
  let texto=`${new Date().toLocaleTimeString()}: ${materiaObj.nome}`;
  if(mensagem) texto+=` - ${mensagem}`;
  if(materiaObj.revisoes && materiaObj.revisoes.length>0){
    texto+=` | Revisões: ${materiaObj.revisoes.map(d=>d.toLocaleDateString()).join(', ')}`;
  }
  hist.textContent=texto;
  historicoList.prepend(hist);
}

function atualizarRevisoesHoje() {
  const hoje = new Date().toDateString();
  revisoesHojeList.innerHTML = '<h3>Revisões de hoje</h3>'; // reset

  materias.forEach(m => {
    const revisoesDoDia = m.revisoes.filter(d => new Date(d).toDateString() === hoje);
    revisoesDoDia.forEach(d => {
      const item = document.createElement('div');
      item.className = 'revisao-hoje-item';

      const timerDiv = document.createElement('div');
      timerDiv.className = 'timer-item';
      timerDiv.textContent = '00:00';

      item.innerHTML = `
        ${m.nome} - ${new Date(d).toLocaleTimeString()}
        <select class="tempoRevisao">
          ${[...Array(12)].map((_,i)=>`<option value="${(i+1)*10}">${(i+1)*10} min</option>`).join('')}
        </select>
        <button class="iniciarRevisao">Iniciar</button>
      `;
      item.appendChild(timerDiv);
      revisoesHojeList.appendChild(item);

      item.querySelector('.iniciarRevisao').onclick = () => {
        const tempoSelecionado = parseInt(item.querySelector('.tempoRevisao').value,10);
        iniciarTimerItem(timerDiv, tempoSelecionado);
      };
    });
  });
}

function iniciarTimerItem(timerDiv, minutos){
  let remaining = minutos*60;
  const intervalItem = setInterval(()=>{
    if(remaining>0){
      remaining--;
      const mins=String(Math.floor(remaining/60)).padStart(2,'0');
      const secs=String(remaining%60).padStart(2,'0');
      timerDiv.textContent = `${mins}:${secs}`;
    } else {
      clearInterval(intervalItem);
      alert('Tempo da revisão terminou!');
    }
  },1000);
}

function mostrarModal(){ revisaoModal.style.display='flex'; }
function esconderModal(){ revisaoModal.style.display='none'; }

function salvarRevisaoFunc(){
  if(!materiaAtual) return;
  const materiaObj = materias.find(m=>m.nome===materiaAtual);
  if(!materiaObj) return;

  const hoje = new Date();
  materiaObj.revisoes.push(hoje);

  if(marcarRevisao.checked){
    materiaObj.revisoes.push(
        new Date(hoje.getTime()+0*24*60*60*1000),
        new Date(hoje.getTime()+1*24*60*60*1000),
        new Date(hoje.getTime()+15*24*60*60*1000),
        new Date(hoje.getTime()+30*24*60*60*1000),
        new Date(hoje.getTime()+45*24*60*60*1000)
    );
  }

  adicionarHistorico(materiaObj, mensagemRevisao.value);
  atualizarRevisoesHoje();
  esconderModal();
  mensagemRevisao.value='';
  marcarRevisao.checked=false;
}

salvarRevisao.addEventListener('click', salvarRevisaoFunc);

function iniciarTimer(){
  let minutes=parseInt(document.getElementById('minutes').value,10);
  totalSeconds=minutes*60;
  remainingSeconds=totalSeconds;
  materiaAtual=escolherMateriaComHistorico();
  if(materiaAtual){ timerMateria.value=materiaAtual; }
  updateDisplay();
  clearInterval(interval);
  interval=setInterval(()=>{
    if(remainingSeconds>0){ remainingSeconds--; updateDisplay(); }
    else { clearInterval(interval); mostrarModal(); }
  },1000);
}

document.getElementById('startBtn').addEventListener('click',iniciarTimer);
document.getElementById('pauseBtn').addEventListener('click',()=>{ clearInterval(interval); mostrarModal(); });
document.getElementById('resumeBtn').addEventListener('click',()=>{
  esconderModal();
  clearInterval(interval);
  interval=setInterval(()=>{
    if(remainingSeconds>0){ remainingSeconds--; updateDisplay(); }
    else{ clearInterval(interval); mostrarModal(); }
  },1000);
});
document.getElementById('stopBtn').addEventListener('click',()=>{ clearInterval(interval); remainingSeconds=0; updateDisplay(); mostrarModal(); });

</script>
</body>
</html>


#############################################################################
<!DOCTYPE html>
<html lang="pt-BR">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Timer com Histórico e Revisões</title>
<style>
  body { font-family: Arial, sans-serif; background-color: #f4f4f4; display:flex; flex-direction:column; justify-content:center; align-items:center; gap:20px; }
  .container, .materias-list, .historico-list, .revisoes-hoje-list, .historico-finalizado { background:white; padding:15px; border-radius:10px; box-shadow:0 4px 8px rgba(0,0,0,0.1); width:350px; display:flex; flex-direction:column; gap:5px; }
  input[type="text"], select, input[type="number"], textarea { padding:10px; font-size:16px; border:1px solid #ccc; border-radius:5px; width:100%; box-sizing:border-box; }
  button { padding:5px 10px; background-color:#4CAF50; color:white; border:none; border-radius:5px; font-size:14px; cursor:pointer; transition: background-color 0.3s; }
  button:hover { background-color:#45a049; }
  .materia-item, .historico-item, .revisao-hoje-item { display:flex; flex-direction:column; justify-content:space-between; padding:5px 10px; border-bottom:1px solid #eee; }
  .materia-buttons button { margin-left:5px; padding:3px 8px; font-size:12px; }
  .selected { background-color:#d1e7dd; border-radius:5px; }
  .revisao-container { display:none; flex-direction:column; gap:5px; margin-top:10px; width:100%; }
  .timer-item { font-size:14px; font-weight:bold; margin-top:5px; }
  .timer-buttons { display:flex; gap:5px; margin-top:5px; }
  .dificuldade-container { display:flex; gap:5px; margin-top:5px; align-items:center; }
</style>
</head>
<body>

<div class="container">
  <input type="text" id="materiaInput" placeholder="Digite a matéria" />
  <label for="peso">Peso:</label>
  <select id="peso">
    <option value="1">1</option>
    <option value="2">2</option>
    <option value="3">3</option>
    <option value="4">4</option>
    <option value="5">5</option>
  </select>
  <button id="addBtn">Adicionar</button>
</div>

<div class="materias-list" id="materiasList"></div>

<div class="time-input">
  <label for="minutes">Minutos:</label>
  <input type="number" id="minutes" min="10" step="10" value="10">
</div>

<div class="timer-container" style="display:flex; gap:10px; align-items:center;">
  <div class="timer" id="timer">00:00</div>
  <select id="timerMateria">
    <option value="">Selecionar matéria</option>
  </select>
</div>

<div class="controls" style="display:flex; gap:10px;">
  <button id="startBtn">Iniciar</button>
  <button id="pauseBtn">Pausar</button>
  <button id="resumeBtn">Continuar</button>
  <button id="stopBtn">Parar</button>
</div>

<div id="revisaoModal" class="revisao-container">
  <textarea id="mensagemRevisao" placeholder="Onde você parou..." rows="3"></textarea>
  <label><input type="checkbox" id="marcarRevisao"> Marcar revisão futura</label>
  <button id="salvarRevisao">Salvar</button>
</div>

<div class="historico-list" id="historicoList"></div>

<div class="revisoes-hoje-list" id="revisoesHojeList">
  <h3>Revisões de hoje</h3>
</div>

<div class="historico-finalizado" id="historicoFinalizado">
  <h3>Histórico de Revisões Finalizadas</h3>
</div>

<script>
const addBtn = document.getElementById('addBtn');
const materiasList = document.getElementById('materiasList');
const timerMateria = document.getElementById('timerMateria');
const historicoList = document.getElementById('historicoList');
const revisaoModal = document.getElementById('revisaoModal');
const mensagemRevisao = document.getElementById('mensagemRevisao');
const marcarRevisao = document.getElementById('marcarRevisao');
const salvarRevisao = document.getElementById('salvarRevisao');
const revisoesHojeList = document.getElementById('revisoesHojeList');
const historicoFinalizado = document.getElementById('historicoFinalizado');

let materias = [];
let materiaAtual = null;
let totalSeconds=0;
let remainingSeconds=0;
let interval=null;

addBtn.addEventListener('click', () => {
  const nome = document.getElementById('materiaInput').value.trim();
  const peso = parseInt(document.getElementById('peso').value, 10);
  if (!nome) return;

  const item = document.createElement('div');
  item.className = 'materia-item';
  const info = document.createElement('span');
  info.textContent = `${nome} (Peso: ${peso})`;

  const buttonsDiv = document.createElement('div');
  const editBtn = document.createElement('button');
  editBtn.textContent = 'Editar';
  editBtn.onclick = () => {
    const novoNome = prompt('Editar matéria:', nome);
    const novoPeso = parseInt(prompt('Editar peso:', peso), 10);
    if (novoNome && novoPeso) {
      info.textContent = `${novoNome} (Peso: ${novoPeso})`;
      const idx = materias.findIndex(m => m.nome === nome);
      materias[idx] = { nome: novoNome, peso: novoPeso, ciclos: materias[idx].ciclos, revisoes: materias[idx].revisoes };
      updateTimerOptions();
    }
  };

  const delBtn = document.createElement('button');
  delBtn.textContent = 'Excluir';
  delBtn.onclick = () => {
    materiasList.removeChild(item);
    materias = materias.filter(m => m.nome !== nome);
    updateTimerOptions();
  };

  buttonsDiv.appendChild(editBtn);
  buttonsDiv.appendChild(delBtn);
  item.appendChild(info);
  item.appendChild(buttonsDiv);
  materiasList.appendChild(item);

  materias.push({ nome, peso, ciclos: 0, revisoes: [] });
  updateTimerOptions();
  document.getElementById('materiaInput').value = '';
});

function updateTimerOptions() {
  timerMateria.innerHTML = '<option value="">Selecionar matéria</option>';
  materias.forEach(m => {
    const option = document.createElement('option');
    option.value = m.nome;
    option.text = `${m.nome} (Peso: ${m.peso})`;
    timerMateria.appendChild(option);
  });
}

function escolherMateriaComHistorico() {
  const k = 2;
  const pesosAjustados = materias.map(m => m.peso * (1 + m.ciclos/k));
  const somaPesos = pesosAjustados.reduce((a,b)=>a+b,0);
  const rand = Math.random() * somaPesos;
  let acumulado = 0;
  for (let i=0;i<materias.length;i++){
    acumulado += pesosAjustados[i];
    if(rand<=acumulado){
      materias.forEach((m,j)=> { m.ciclos += (i===j ? 0 : 1); });
      materias[i].ciclos=0;
      return materias[i].nome;
    }
  }
  return null;
}

function updateDisplay(){
  let mins=String(Math.floor(remainingSeconds/60)).padStart(2,'0');
  let secs=String(remainingSeconds%60).padStart(2,'0');
  document.getElementById('timer').textContent=`${mins}:${secs}`;
}

function adicionarHistorico(materiaObj, mensagem=null){
  const hist=document.createElement('div');
  hist.className='historico-item';
  let texto=`${new Date().toLocaleTimeString()}: ${materiaObj.nome}`;
  if(mensagem) texto+=` - ${mensagem}`;
  if(materiaObj.revisoes && materiaObj.revisoes.length>0){
    texto+=` | Revisões: ${materiaObj.revisoes.map(d=>d.toLocaleDateString()).join(', ')}`;
  }
  hist.textContent = texto; // <-- CORRIGIDO: adiciona o conteúdo
  historicoList.prepend(hist);
}

// Atualiza apenas a área de revisões de hoje
function atualizarRevisoesHoje() {
  const hoje = new Date().toDateString();
  revisoesHojeList.innerHTML = '<h3>Revisões de hoje</h3>'; // reset

  materias.forEach(m => {
    const revisoesDoDia = m.revisoes.filter(d => new Date(d).toDateString() === hoje);
    revisoesDoDia.forEach(d => {
      const item = document.createElement('div');
      item.className = 'revisao-hoje-item';

      const timerDiv = document.createElement('div');
      timerDiv.className = 'timer-item';
      timerDiv.textContent = '00:00';

      item.innerHTML = `
        ${m.nome} - ${new Date(d).toLocaleTimeString()}
        <select class="tempoRevisao">
          ${[...Array(12)].map((_,i)=>`<option value="${(i+1)*10}">${(i+1)*10} min</option>`).join('')}
        </select>
        <div class="timer-buttons">
          <button class="iniciarRevisao">Iniciar</button>
          <button class="pausarRevisao">Pausar</button>
          <button class="continuarRevisao">Continuar</button>
          <button class="finalizarRevisao">Finalizar</button>
        </div>
      `;
      item.appendChild(timerDiv);
      revisoesHojeList.appendChild(item);

      let intervalItem=null;
      let remaining=0;

      const iniciarBtn = item.querySelector('.iniciarRevisao');
      const pausarBtn = item.querySelector('.pausarRevisao');
      const continuarBtn = item.querySelector('.continuarRevisao');
      const finalizarBtn = item.querySelector('.finalizarRevisao');

      const criarFormularioDificuldade = () => {
        let form = item.querySelector('.dificuldade-container');
        if(form) return form;
        form = document.createElement('div');
        form.className = 'dificuldade-container';
        form.innerHTML = `
          <select class="dificuldadeSelect">
            ${[...Array(10)].map((_,i)=>`<option value="${i+1}">${i+1}</option>`).join('')}
          </select>
          <button class="salvarDificuldade">Salvar</button>
        `;
        item.appendChild(form);

        form.querySelector('.salvarDificuldade').onclick = () => {
          const dificuldade = form.querySelector('.dificuldadeSelect').value;
          const textoHistorico = `${new Date().toLocaleTimeString()} - ${m.nome} | Dificuldade: ${dificuldade}`;
          const histItem = document.createElement('div');
          histItem.className = 'historico-item';
          histItem.textContent = textoHistorico;
          historicoFinalizado.prepend(histItem);
          form.remove();
        };
        return form;
      };

      const finalizarTimer = () => {
        clearInterval(intervalItem);
        timerDiv.textContent='00:00';
        criarFormularioDificuldade();
      };

      iniciarBtn.onclick = () => {
        remaining = parseInt(item.querySelector('.tempoRevisao').value,10)*60;
        clearInterval(intervalItem);
        intervalItem=setInterval(()=>{
          if(remaining>0){
            remaining--;
            const mins=String(Math.floor(remaining/60)).padStart(2,'0');
            const secs=String(remaining%60).padStart(2,'0');
            timerDiv.textContent = `${mins}:${secs}`;
          } else { finalizarTimer(); alert('Tempo da revisão terminou!'); }
        },1000);
      };

      pausarBtn.onclick = () => { clearInterval(intervalItem); };
      continuarBtn.onclick = () => {
        clearInterval(intervalItem);
        intervalItem=setInterval(()=>{
          if(remaining>0){
            remaining--;
            const mins=String(Math.floor(remaining/60)).padStart(2,'0');
            const secs=String(remaining%60).padStart(2,'0');
            timerDiv.textContent = `${mins}:${secs}`;
          } else { finalizarTimer(); alert('Tempo da revisão terminou!'); }
        },1000);
      };
      finalizarBtn.onclick = finalizarTimer;
    });
  });
}

function mostrarModal(){ revisaoModal.style.display='flex'; }
function esconderModal(){ revisaoModal.style.display='none'; }

function salvarRevisaoFunc(){
  if(!materiaAtual) return;
  const materiaObj = materias.find(m=>m.nome===materiaAtual);
  if(!materiaObj) return;

  const hoje = new Date();
  materiaObj.revisoes.push(hoje);

  if(marcarRevisao.checked){
    materiaObj.revisoes.push(
        new Date(hoje.getTime()+0*24*60*60*1000),
        new Date(hoje.getTime()+1*24*60*60*1000),
        new Date(hoje.getTime()+15*24*60*60*1000),
        new Date(hoje.getTime()+30*24*60*60*1000),
        new Date(hoje.getTime()+45*24*60*60*1000)
    );
  }

  adicionarHistorico(materiaObj, mensagemRevisao.value);
  atualizarRevisoesHoje();
  esconderModal();
  mensagemRevisao.value='';
  marcarRevisao.checked=false;
}

salvarRevisao.addEventListener('click', salvarRevisaoFunc);

function iniciarTimer(){
  let minutes=parseInt(document.getElementById('minutes').value,10);
  totalSeconds=minutes*60;
  remainingSeconds=totalSeconds;
  materiaAtual=escolherMateriaComHistorico();
  if(materiaAtual){ timerMateria.value=materiaAtual; }
  updateDisplay();
  clearInterval(interval);
  interval=setInterval(()=>{
    if(remainingSeconds>0){ remainingSeconds--; updateDisplay(); }
    else { clearInterval(interval); mostrarModal(); }
  },1000);
}

document.getElementById('startBtn').addEventListener('click',iniciarTimer);
document.getElementById('pauseBtn').addEventListener('click',()=>{ clearInterval(interval); mostrarModal(); });
document.getElementById('resumeBtn').addEventListener('click',()=>{
  esconderModal();
  clearInterval(interval);
  interval=setInterval(()=>{
    if(remainingSeconds>0){ remainingSeconds--; updateDisplay(); }
    else{ clearInterval(interval); mostrarModal(); }
  },1000);
});
document.getElementById('stopBtn').addEventListener('click',()=>{ clearInterval(interval); remainingSeconds=0; updateDisplay(); mostrarModal(); });

</script>
</body>
</html>


____________---------=-----------------------------------------------------

<!DOCTYPE html>
<html lang="pt-BR">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Timer com Histórico e Revisões</title>
<style>
  body { font-family: Arial, sans-serif; background-color: #f4f4f4; display:flex; flex-direction:column; justify-content:center; align-items:center; gap:20px; }
  .container, .materias-list, .historico-list, .revisoes-hoje-list, .historico-finalizado { background:white; padding:15px; border-radius:10px; box-shadow:0 4px 8px rgba(0,0,0,0.1); width:350px; display:flex; flex-direction:column; gap:5px; }
  input[type="text"], select, input[type="number"], textarea { padding:10px; font-size:16px; border:1px solid #ccc; border-radius:5px; width:100%; box-sizing:border-box; }
  button { padding:5px 10px; background-color:#4CAF50; color:white; border:none; border-radius:5px; font-size:14px; cursor:pointer; transition: background-color 0.3s; }
  button:hover { background-color:#45a049; }
  .materia-item, .historico-item, .revisao-hoje-item { display:flex; flex-direction:column; justify-content:space-between; padding:5px 10px; border-bottom:1px solid #eee; }
  .materia-buttons button { margin-left:5px; padding:3px 8px; font-size:12px; }
  .selected { background-color:#d1e7dd; border-radius:5px; }
  .revisao-container { display:none; flex-direction:column; gap:5px; margin-top:10px; width:100%; }
  .timer-item { font-size:14px; font-weight:bold; margin-top:5px; }
  .timer-buttons { display:flex; gap:5px; margin-top:5px; }
  .dificuldade-container { display:flex; flex-direction:column; gap:5px; margin-top:5px; }
</style>
</head>
<body>

<div class="container">
  <input type="text" id="materiaInput" placeholder="Digite a matéria" />
  <label for="peso">Peso:</label>
  <select id="peso">
    <option value="1">1</option>
    <option value="2">2</option>
    <option value="3">3</option>
    <option value="4">4</option>
    <option value="5">5</option>
  </select>
  <button id="addBtn">Adicionar</button>
</div>

<div class="materias-list" id="materiasList"></div>

<div class="time-input">
  <label for="minutes">Minutos:</label>
  <input type="number" id="minutes" min="10" step="10" value="10">
</div>

<div class="timer-container" style="display:flex; gap:10px; align-items:center;">
  <div class="timer" id="timer">00:00</div>
  <select id="timerMateria">
    <option value="">Selecionar matéria</option>
  </select>
</div>

<div class="controls" style="display:flex; gap:10px;">
  <button id="startBtn">Iniciar</button>
  <button id="pauseBtn">Pausar</button>
  <button id="resumeBtn">Continuar</button>
  <button id="stopBtn">Parar</button>
</div>

<div id="revisaoModal" class="revisao-container">
  <textarea id="mensagemRevisao" placeholder="Onde você parou..." rows="3"></textarea>
  <label><input type="checkbox" id="marcarRevisao"> Marcar revisão futura</label>
  <button id="salvarRevisao">Salvar</button>
</div>

<div class="historico-list" id="historicoList"></div>

<div class="revisoes-hoje-list" id="revisoesHojeList">
  <h3>Revisões de hoje</h3>
</div>

<div class="historico-finalizado" id="historicoFinalizado">
  <h3>Histórico de Revisões Finalizadas</h3>
</div>

<script>
const addBtn = document.getElementById('addBtn');
const materiasList = document.getElementById('materiasList');
const timerMateria = document.getElementById('timerMateria');
const historicoList = document.getElementById('historicoList');
const revisaoModal = document.getElementById('revisaoModal');
const mensagemRevisao = document.getElementById('mensagemRevisao');
const marcarRevisao = document.getElementById('marcarRevisao');
const salvarRevisao = document.getElementById('salvarRevisao');
const revisoesHojeList = document.getElementById('revisoesHojeList');
const historicoFinalizado = document.getElementById('historicoFinalizado');

let materias = [];
let materiaAtual = null;
let totalSeconds=0;
let remainingSeconds=0;
let interval=null;

addBtn.addEventListener('click', () => {
  const nome = document.getElementById('materiaInput').value.trim();
  const peso = parseInt(document.getElementById('peso').value, 10);
  if (!nome) return;

  const item = document.createElement('div');
  item.className = 'materia-item';
  const info = document.createElement('span');
  info.textContent = `${nome} (Peso: ${peso})`;

  const buttonsDiv = document.createElement('div');
  const editBtn = document.createElement('button');
  editBtn.textContent = 'Editar';
  editBtn.onclick = () => {
    const novoNome = prompt('Editar matéria:', nome);
    const novoPeso = parseInt(prompt('Editar peso:', peso), 10);
    if (novoNome && novoPeso) {
      info.textContent = `${novoNome} (Peso: ${novoPeso})`;
      const idx = materias.findIndex(m => m.nome === nome);
      materias[idx] = { nome: novoNome, peso: novoPeso, ciclos: materias[idx].ciclos, revisoes: materias[idx].revisoes };
      updateTimerOptions();
    }
  };

  const delBtn = document.createElement('button');
  delBtn.textContent = 'Excluir';
  delBtn.onclick = () => {
    materiasList.removeChild(item);
    materias = materias.filter(m => m.nome !== nome);
    updateTimerOptions();
  };

  buttonsDiv.appendChild(editBtn);
  buttonsDiv.appendChild(delBtn);
  item.appendChild(info);
  item.appendChild(buttonsDiv);
  materiasList.appendChild(item);

  materias.push({ nome, peso, ciclos: 0, revisoes: [] });
  updateTimerOptions();
  document.getElementById('materiaInput').value = '';
});

function updateTimerOptions() {
  timerMateria.innerHTML = '<option value="">Selecionar matéria</option>';
  materias.forEach(m => {
    const option = document.createElement('option');
    option.value = m.nome;
    option.text = `${m.nome} (Peso: ${m.peso})`;
    timerMateria.appendChild(option);
  });
}

function escolherMateriaComHistorico() {
  const k = 2;
  const pesosAjustados = materias.map(m => m.peso * (1 + m.ciclos/k));
  const somaPesos = pesosAjustados.reduce((a,b)=>a+b,0);
  const rand = Math.random() * somaPesos;
  let acumulado = 0;
  for (let i=0;i<materias.length;i++){
    acumulado += pesosAjustados[i];
    if(rand<=acumulado){
      materias.forEach((m,j)=> { m.ciclos += (i===j ? 0 : 1); });
      materias[i].ciclos=0;
      return materias[i].nome;
    }
  }
  return null;
}

function updateDisplay(){
  let mins=String(Math.floor(remainingSeconds/60)).padStart(2,'0');
  let secs=String(remainingSeconds%60).padStart(2,'0');
  document.getElementById('timer').textContent=`${mins}:${secs}`;
}

function adicionarHistorico(materiaObj, mensagem=null){
  const hist=document.createElement('div');
  hist.className='historico-item';
  let texto=`${new Date().toLocaleTimeString()}: ${materiaObj.nome}`;
  if(mensagem) texto+=` - ${mensagem}`;
  if(materiaObj.revisoes && materiaObj.revisoes.length>0){
    texto+=` | Revisões: ${materiaObj.revisoes.map(d=>d.toLocaleDateString()).join(', ')}`;
  }
  hist.textContent = texto;
  historicoList.prepend(hist);
}

function atualizarRevisoesHoje() {
  const hoje = new Date().toDateString();
  revisoesHojeList.innerHTML = '<h3>Revisões de hoje</h3>';

  materias.forEach(m => {
    const revisoesDoDia = m.revisoes.filter(d => new Date(d).toDateString() === hoje);
    revisoesDoDia.forEach(d => {
      const item = document.createElement('div');
      item.className = 'revisao-hoje-item';

      const timerDiv = document.createElement('div');
      timerDiv.className = 'timer-item';
      timerDiv.textContent = '00:00';

      item.innerHTML = `
        ${m.nome} - ${new Date(d).toLocaleTimeString()}
        <select class="tempoRevisao">
          ${[...Array(12)].map((_,i)=>`<option value="${(i+1)*10}">${(i+1)*10} min</option>`).join('')}
        </select>
        <div class="timer-buttons">
          <button class="iniciarRevisao">Iniciar</button>
          <button class="pausarRevisao">Pausar</button>
          <button class="continuarRevisao">Continuar</button>
          <button class="finalizarRevisao">Finalizar</button>
        </div>
      `;
      item.appendChild(timerDiv);
      revisoesHojeList.appendChild(item);

      let intervalItem=null;
      let remaining=0;

      const iniciarBtn = item.querySelector('.iniciarRevisao');
      const pausarBtn = item.querySelector('.pausarRevisao');
      const continuarBtn = item.querySelector('.continuarRevisao');
      const finalizarBtn = item.querySelector('.finalizarRevisao');

      const criarFormularioDificuldade = () => {
        let form = item.querySelector('.dificuldade-container');
        if(form) return form;
        form = document.createElement('div');
        form.className = 'dificuldade-container';
        form.innerHTML = `
          <label>Dificuldade:</label>
          <select class="dificuldadeSelect">
            ${[...Array(10)].map((_,i)=>`<option value="${i+1}">${i+1}</option>`).join('')}
          </select>
          <label>Acertos:</label>
          <select class="acertosSelect">
            ${[...Array(30)].map((_,i)=>`<option value="${i+1}">${i+1}</option>`).join('')}
          </select>
          <button class="salvarDificuldade">Salvar</button>
        `;
        item.appendChild(form);

        form.querySelector('.salvarDificuldade').onclick = () => {
          const dificuldade = form.querySelector('.dificuldadeSelect').value;
          const acertos = form.querySelector('.acertosSelect').value;
          const textoHistorico = `${new Date().toLocaleTimeString()} - ${m.nome} | Dificuldade: ${dificuldade} | Acertos: ${acertos}`;
          const histItem = document.createElement('div');
          histItem.className = 'historico-item';
          histItem.textContent = textoHistorico;
          historicoFinalizado.prepend(histItem);
          form.remove();
        };
        return form;
      };

      const finalizarTimer = () => {
        clearInterval(intervalItem);
        timerDiv.textContent='00:00';
        criarFormularioDificuldade();
      };

      iniciarBtn.onclick = () => {
        remaining = parseInt(item.querySelector('.tempoRevisao').value,10)*60;
        clearInterval(intervalItem);
        intervalItem=setInterval(()=>{
          if(remaining>0){
            remaining--;
            const mins=String(Math.floor(remaining/60)).padStart(2,'0');
            const secs=String(remaining%60).padStart(2,'0');
            timerDiv.textContent = `${mins}:${secs}`;
          } else { finalizarTimer(); alert('Tempo da revisão terminou!'); }
        },1000);
      };

      pausarBtn.onclick = () => { clearInterval(intervalItem); };
      continuarBtn.onclick = () => {
        clearInterval(intervalItem);
        intervalItem=setInterval(()=>{
          if(remaining>0){
            remaining--;
            const mins=String(Math.floor(remaining/60)).padStart(2,'0');
            const secs=String(remaining%60).padStart(2,'0');
            timerDiv.textContent = `${mins}:${secs}`;
          } else { finalizarTimer(); alert('Tempo da revisão terminou!'); }
        },1000);
      };
      finalizarBtn.onclick = finalizarTimer;
    });
  });
}

function mostrarModal(){ revisaoModal.style.display='flex'; }
function esconderModal(){ revisaoModal.style.display='none'; }

function salvarRevisaoFunc(){
  if(!materiaAtual) return;
  const materiaObj = materias.find(m=>m.nome===materiaAtual);
  if(!materiaObj) return;

  const hoje = new Date();
  materiaObj.revisoes.push(hoje);

  if(marcarRevisao.checked){
    materiaObj.revisoes.push(
        new Date(hoje.getTime()+1*24*60*60*1000),
        new Date(hoje.getTime()+15*24*60*60*1000),
        new Date(hoje.getTime()+30*24*60*60*1000),
        new Date(hoje.getTime()+45*24*60*60*1000)
    );
  }

  adicionarHistorico(materiaObj, mensagemRevisao.value);
  atualizarRevisoesHoje();
  esconderModal();
  mensagemRevisao.value='';
  marcarRevisao.checked=false;
}

salvarRevisao.addEventListener('click', salvarRevisaoFunc);

function iniciarTimer(){
  let minutes=parseInt(document.getElementById('minutes').value,10);
  totalSeconds=minutes*60;
  remainingSeconds=totalSeconds;
  materiaAtual=escolherMateriaComHistorico();
  if(materiaAtual){ timerMateria.value=materiaAtual; }
  updateDisplay();
  clearInterval(interval);
  interval=setInterval(()=>{
    if(remainingSeconds>0){ remainingSeconds--; updateDisplay(); }
    else { clearInterval(interval); mostrarModal(); }
  },1000);
}

document.getElementById('startBtn').addEventListener('click',iniciarTimer);
document.getElementById('pauseBtn').addEventListener('click',()=>{ clearInterval(interval); mostrarModal(); });
document.getElementById('resumeBtn').addEventListener('click',()=>{
  esconderModal();
  clearInterval(interval);
  interval=setInterval(()=>{
    if(remainingSeconds>0){ remainingSeconds--; updateDisplay(); }
    else{ clearInterval(interval); mostrarModal(); }
  },1000);
});
document.getElementById('stopBtn').addEventListener('click',()=>{ clearInterval(interval); remainingSeconds=0; updateDisplay(); mostrarModal(); });

</script>
</body>
</html>

#############################################################################

<!DOCTYPE html>
<html lang="pt-BR">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Timer com Histórico e Revisões</title>
<style>
  body { font-family: Arial, sans-serif; background-color: #f4f4f4; display:flex; flex-direction:column; justify-content:center; align-items:center; gap:20px; }
  .container, .materias-list, .historico-list, .revisoes-hoje-list, .historico-finalizado { background:white; padding:15px; border-radius:10px; box-shadow:0 4px 8px rgba(0,0,0,0.1); width:350px; display:flex; flex-direction:column; gap:5px; }
  input[type="text"], select, input[type="number"], textarea { padding:10px; font-size:16px; border:1px solid #ccc; border-radius:5px; width:100%; box-sizing:border-box; }
  button { padding:5px 10px; background-color:#4CAF50; color:white; border:none; border-radius:5px; font-size:14px; cursor:pointer; transition: background-color 0.3s; }
  button:hover { background-color:#45a049; }
  .materia-item, .historico-item, .revisao-hoje-item { display:flex; flex-direction:column; justify-content:space-between; padding:5px 10px; border-bottom:1px solid #eee; }
  .materia-buttons button { margin-left:5px; padding:3px 8px; font-size:12px; }
  .selected { background-color:#d1e7dd; border-radius:5px; }
  .revisao-container { display:none; flex-direction:column; gap:5px; margin-top:10px; width:100%; }
  .timer-item { font-size:14px; font-weight:bold; margin-top:5px; }
  .timer-buttons { display:flex; gap:5px; margin-top:5px; }
  .dificuldade-container { display:flex; flex-direction:column; gap:5px; margin-top:5px; }
</style>
</head>
<body>
<!-- ========== BLOCO 1: ADICIONAR MATÉRIAS ========== -->
<div class="container">
  <input type="text" id="materiaInput" placeholder="Digite a matéria" />
  <label for="peso">Peso:</label>
  <select id="peso">
    <option value="1">1</option>
    <option value="2">2</option>
    <option value="3">3</option>
    <option value="4">4</option>
    <option value="5">5</option>
  </select>
  <button id="addBtn">Adicionar</button>
</div>

<div class="materias-list" id="materiasList"></div>

<!-- ========== BLOCO 2: TIMER PRINCIPAL ========== -->

<div class="time-input">
  <label for="minutes">Minutos:</label>
  <input type="number" id="minutes" min="10" step="10" value="10">
</div>

<div class="timer-container" style="display:flex; gap:10px; align-items:center;">
  <div class="timer" id="timer">00:00</div>
  <select id="timerMateria">
    <option value="">Selecionar matéria</option>
  </select>
</div>

<div class="controls" style="display:flex; gap:10px;">
  <button id="startBtn">Iniciar</button>
  <button id="pauseBtn">Pausar</button>
  <button id="resumeBtn">Continuar</button>
  <button id="stopBtn">Parar</button>
</div>
<!-- ========== BLOCO 3: MODAL DE REVISÃO ========== -->

<div id="revisaoModal" class="revisao-container">
  <textarea id="mensagemRevisao" placeholder="Onde você parou..." rows="3"></textarea>
  <label><input type="checkbox" id="marcarRevisao"> Marcar revisão futura</label>
  <button id="salvarRevisao">Salvar</button>
</div>

<!-- ========== BLOCO 4: HISTÓRICO ORIGINAL ========== -->

<div class="historico-list" id="historicoList"></div>
<!-- ========== BLOCO 5: REVISÕES DE HOJE ========== -->

<div class="revisoes-hoje-list" id="revisoesHojeList">
  <h3>Revisões de hoje</h3>
</div>
<!-- ========== BLOCO 6: HISTÓRICO DE REVISÕES FINALIZADAS ========== -->
<div class="historico-finalizado" id="historicoFinalizado">
  <h3>Histórico de Revisões Finalizadas</h3>
</div>

<!-- ========== BLOCO 7: SCRIPT ========== -->
<script>
    /* ===== VARIÁVEIS GLOBAIS ===== */
const addBtn = document.getElementById('addBtn');
const materiasList = document.getElementById('materiasList');
const timerMateria = document.getElementById('timerMateria');
const historicoList = document.getElementById('historicoList');
const revisaoModal = document.getElementById('revisaoModal');
const mensagemRevisao = document.getElementById('mensagemRevisao');
const marcarRevisao = document.getElementById('marcarRevisao');
const salvarRevisao = document.getElementById('salvarRevisao');
const revisoesHojeList = document.getElementById('revisoesHojeList');
const historicoFinalizado = document.getElementById('historicoFinalizado');

let materias = [];
let materiaAtual = null;
let totalSeconds=0;
let remainingSeconds=0;
let interval=null;

/* ===== BLOCO 7.1: ADICIONAR MATÉRIAS ===== */
addBtn.addEventListener('click', () => {
  const nome = document.getElementById('materiaInput').value.trim();
  const peso = parseInt(document.getElementById('peso').value, 10);
  if (!nome) return;

  const item = document.createElement('div');
  item.className = 'materia-item';
  const info = document.createElement('span');
  info.textContent = `${nome} (Peso: ${peso})`;

  const buttonsDiv = document.createElement('div');
  const editBtn = document.createElement('button');
  editBtn.textContent = 'Editar';
  editBtn.onclick = () => {
    const novoNome = prompt('Editar matéria:', nome);
    const novoPeso = parseInt(prompt('Editar peso:', peso), 10);
    if (novoNome && novoPeso) {
      info.textContent = `${novoNome} (Peso: ${novoPeso})`;
      const idx = materias.findIndex(m => m.nome === nome);
      materias[idx] = { nome: novoNome, peso: novoPeso, ciclos: materias[idx].ciclos, revisoes: materias[idx].revisoes };
      updateTimerOptions();
    }
  };

  const delBtn = document.createElement('button');
  delBtn.textContent = 'Excluir';
  delBtn.onclick = () => {
    materiasList.removeChild(item);
    materias = materias.filter(m => m.nome !== nome);
    updateTimerOptions();
  };

  buttonsDiv.appendChild(editBtn);
  buttonsDiv.appendChild(delBtn);
  item.appendChild(info);
  item.appendChild(buttonsDiv);
  materiasList.appendChild(item);

  materias.push({ nome, peso, ciclos: 0, revisoes: [] });
  updateTimerOptions();
  document.getElementById('materiaInput').value = '';
});

/* ===== BLOCO 7.2: ATUALIZAÇÃO DOS DROPDOWNS ===== */
function updateTimerOptions() {
  timerMateria.innerHTML = '<option value="">Selecionar matéria</option>';
  materias.forEach(m => {
    const option = document.createElement('option');
    option.value = m.nome;
    option.text = `${m.nome} (Peso: ${m.peso})`;
    timerMateria.appendChild(option);
  });
}
/* ===== BLOCO 7.3: ESCOLHER MATÉRIA COM HISTÓRICO ===== */
function escolherMateriaComHistorico() {
  const k = 2;
  const pesosAjustados = materias.map(m => m.peso * (1 + m.ciclos/k));
  const somaPesos = pesosAjustados.reduce((a,b)=>a+b,0);
  const rand = Math.random() * somaPesos;
  let acumulado = 0;
  for (let i=0;i<materias.length;i++){
    acumulado += pesosAjustados[i];
    if(rand<=acumulado){
      materias.forEach((m,j)=> { m.ciclos += (i===j ? 0 : 1); });
      materias[i].ciclos=0;
      return materias[i].nome;
    }
  }
  return null;
}

/* ===== BLOCO 7.4: DISPLAY TIMER PRINCIPAL ===== */
function updateDisplay(){
  let mins=String(Math.floor(remainingSeconds/60)).padStart(2,'0');
  let secs=String(remainingSeconds%60).padStart(2,'0');
  document.getElementById('timer').textContent=`${mins}:${secs}`;
}

/* ===== BLOCO 7.5: HISTÓRICO ORIGINAL ===== */
function adicionarHistorico(materiaObj, mensagem=null){
  const hist=document.createElement('div');
  hist.className='historico-item';
  let texto=`${new Date().toLocaleTimeString()}: ${materiaObj.nome}`;
  if(mensagem) texto+=` - ${mensagem}`;
  if(materiaObj.revisoes && materiaObj.revisoes.length>0){
    texto+=` | Revisões: ${materiaObj.revisoes.map(d=>d.toLocaleDateString()).join(', ')}`;
  }
  hist.textContent = texto;
  historicoList.prepend(hist);
}

/* ===== BLOCO 7.6: REVISÕES DE HOJE ===== */
function atualizarRevisoesHoje() {
  const hoje = new Date().toDateString();
  revisoesHojeList.innerHTML = '<h3>Revisões de hoje</h3>';

  materias.forEach(m => {
    const revisoesDoDia = m.revisoes.filter(d => new Date(d).toDateString() === hoje);
    revisoesDoDia.forEach(d => {
      const item = document.createElement('div');
      item.className = 'revisao-hoje-item';

      const timerDiv = document.createElement('div');
      timerDiv.className = 'timer-item';
      timerDiv.textContent = '00:00';

      item.innerHTML = `
        ${m.nome} - ${new Date(d).toLocaleTimeString()}
        <select class="tempoRevisao">
          ${[...Array(12)].map((_,i)=>`<option value="${(i+1)*10}">${(i+1)*10} min</option>`).join('')}
        </select>
        <div class="timer-buttons">
          <button class="iniciarRevisao">Iniciar</button>
          <button class="pausarRevisao">Pausar</button>
          <button class="continuarRevisao">Continuar</button>
          <button class="finalizarRevisao">Finalizar</button>
        </div>
      `;
      item.appendChild(timerDiv);
      revisoesHojeList.appendChild(item);


      /* ===== BLOCO 7.6.1: LOGICA DO TIMER DA REVISÃO ===== */
      let intervalItem=null;
      let remaining=0;

      const iniciarBtn = item.querySelector('.iniciarRevisao');
      const pausarBtn = item.querySelector('.pausarRevisao');
      const continuarBtn = item.querySelector('.continuarRevisao');
      const finalizarBtn = item.querySelector('.finalizarRevisao');

      const criarFormularioDificuldade = () => {
        let form = item.querySelector('.dificuldade-container');
        if(form) return form;
        form = document.createElement('div');
        form.className = 'dificuldade-container';
        form.innerHTML = `
          <label>Dificuldade:</label>
          <select class="dificuldadeSelect">
            ${[...Array(10)].map((_,i)=>`<option value="${i+1}">${i+1}</option>`).join('')}
          </select>
          <label>Acertos:</label>
          <select class="acertosSelect">
            ${[...Array(30)].map((_,i)=>`<option value="${i+1}">${i+1}</option>`).join('')}
          </select>
          <button class="salvarDificuldade">Salvar</button>
        `;
        item.appendChild(form);

        form.querySelector('.salvarDificuldade').onclick = () => {
          const dificuldade = form.querySelector('.dificuldadeSelect').value;
          const acertos = form.querySelector('.acertosSelect').value;
          const textoHistorico = `${new Date().toLocaleTimeString()} - ${m.nome} | Dificuldade: ${dificuldade} | Acertos: ${acertos}`;
          const histItem = document.createElement('div');
          histItem.className = 'historico-item';
          histItem.textContent = textoHistorico;
          historicoFinalizado.prepend(histItem);
          form.remove();
        };
        return form;
      };

      const finalizarTimer = () => {
        clearInterval(intervalItem);
        timerDiv.textContent='00:00';
        criarFormularioDificuldade();
      };

      iniciarBtn.onclick = () => {
        remaining = parseInt(item.querySelector('.tempoRevisao').value,10)*60;
        clearInterval(intervalItem);
        intervalItem=setInterval(()=>{
          if(remaining>0){
            remaining--;
            const mins=String(Math.floor(remaining/60)).padStart(2,'0');
            const secs=String(remaining%60).padStart(2,'0');
            timerDiv.textContent = `${mins}:${secs}`;
          } else { finalizarTimer(); alert('Tempo da revisão terminou!'); }
        },1000);
      };

      pausarBtn.onclick = () => { clearInterval(intervalItem); };
      continuarBtn.onclick = () => {
        clearInterval(intervalItem);
        intervalItem=setInterval(()=>{
          if(remaining>0){
            remaining--;
            const mins=String(Math.floor(remaining/60)).padStart(2,'0');
            const secs=String(remaining%60).padStart(2,'0');
            timerDiv.textContent = `${mins}:${secs}`;
          } else { finalizarTimer(); alert('Tempo da revisão terminou!'); }
        },1000);
      };
      finalizarBtn.onclick = finalizarTimer;
    });
  });
}

/* ===== BLOCO 7.7: MODAL DE REVISÃO ===== */

function mostrarModal(){ revisaoModal.style.display='flex'; }
function esconderModal(){ revisaoModal.style.display='none'; }

function salvarRevisaoFunc(){
  if(!materiaAtual) return;
  const materiaObj = materias.find(m=>m.nome===materiaAtual);
  if(!materiaObj) return;

  const hoje = new Date();
  materiaObj.revisoes.push(hoje);

  if(marcarRevisao.checked){
    materiaObj.revisoes.push(
        new Date(hoje.getTime()+1*24*60*60*1000),
        new Date(hoje.getTime()+15*24*60*60*1000),
        new Date(hoje.getTime()+30*24*60*60*1000),
        new Date(hoje.getTime()+45*24*60*60*1000)
    );
  }

  adicionarHistorico(materiaObj, mensagemRevisao.value);
  atualizarRevisoesHoje();
  esconderModal();
  mensagemRevisao.value='';
  marcarRevisao.checked=false;
}

salvarRevisao.addEventListener('click', salvarRevisaoFunc);

/* ===== BLOCO 7.8: TIMER PRINCIPAL ===== */
function iniciarTimer(){
  let minutes=parseInt(document.getElementById('minutes').value,10);
  totalSeconds=minutes*60;
  remainingSeconds=totalSeconds;
  materiaAtual=escolherMateriaComHistorico();
  if(materiaAtual){ timerMateria.value=materiaAtual; }
  updateDisplay();
  clearInterval(interval);
  interval=setInterval(()=>{
    if(remainingSeconds>0){ remainingSeconds--; updateDisplay(); }
    else { clearInterval(interval); mostrarModal(); }
  },1000);
}

document.getElementById('startBtn').addEventListener('click',iniciarTimer);
document.getElementById('pauseBtn').addEventListener('click',()=>{ clearInterval(interval); mostrarModal(); });
document.getElementById('resumeBtn').addEventListener('click',()=>{
  esconderModal();
  clearInterval(interval);
  interval=setInterval(()=>{
    if(remainingSeconds>0){ remainingSeconds--; updateDisplay(); }
    else{ clearInterval(interval); mostrarModal(); }
  },1000);
});
document.getElementById('stopBtn').addEventListener('click',()=>{ clearInterval(interval); remainingSeconds=0; updateDisplay(); mostrarModal(); });

</script>
</body>
</html>

-----------------------------------------------------------------------------------------

<!DOCTYPE html>
<html lang="pt-BR">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Timer com Histórico e Revisões - Drag & Drop</title>
<style>
  body { font-family: Arial, sans-serif; background-color: #f4f4f4; display:flex; flex-direction:column; justify-content:center; align-items:center; gap:20px; }
  .bloco { background:white; padding:15px; border-radius:10px; box-shadow:0 4px 8px rgba(0,0,0,0.1); width:350px; display:flex; flex-direction:column; gap:5px; cursor:move; }
  input[type="text"], select, input[type="number"], textarea { padding:10px; font-size:16px; border:1px solid #ccc; border-radius:5px; width:100%; box-sizing:border-box; }
  button { padding:5px 10px; background-color:#4CAF50; color:white; border:none; border-radius:5px; font-size:14px; cursor:pointer; transition: background-color 0.3s; }
  button:hover { background-color:#45a049; }
  .materia-item, .historico-item, .revisao-hoje-item { display:flex; flex-direction:column; justify-content:space-between; padding:5px 10px; border-bottom:1px solid #eee; }
  .materia-buttons button { margin-left:5px; padding:3px 8px; font-size:12px; }
  .selected { background-color:#d1e7dd; border-radius:5px; }
  .revisao-container { display:none; flex-direction:column; gap:5px; margin-top:10px; width:100%; }
  .timer-item { font-size:14px; font-weight:bold; margin-top:5px; }
  .timer-buttons { display:flex; gap:5px; margin-top:5px; }
  .dificuldade-container { display:flex; flex-direction:column; gap:5px; margin-top:5px; }
</style>
</head>
<body>

<!-- CONTÊINER PRINCIPAL ARRASTÁVEL -->
<div id="editor">

  <!-- BLOCO 1: ADICIONAR MATÉRIAS -->
  <div class="bloco" id="blocoAdicionar">
    <input type="text" id="materiaInput" placeholder="Digite a matéria" />
    <label for="peso">Peso:</label>
    <select id="peso">
      <option value="1">1</option>
      <option value="2">2</option>
      <option value="3">3</option>
      <option value="4">4</option>
      <option value="5">5</option>
    </select>
    <button id="addBtn">Adicionar</button>
    <div class="materias-list" id="materiasList"></div>
  </div>

  <!-- BLOCO 2: TIMER PRINCIPAL -->
  <div class="bloco" id="blocoTimer">
    <div class="time-input">
      <label for="minutes">Minutos:</label>
      <input type="number" id="minutes" min="10" step="10" value="10">
    </div>
    <div class="timer-container" style="display:flex; gap:10px; align-items:center;">
      <div class="timer" id="timer">00:00</div>
      <select id="timerMateria">
        <option value="">Selecionar matéria</option>
      </select>
    </div>
    <div class="controls" style="display:flex; gap:10px;">
      <button id="startBtn">Iniciar</button>
      <button id="pauseBtn">Pausar</button>
      <button id="resumeBtn">Continuar</button>
      <button id="stopBtn">Parar</button>
    </div>
  </div>

  <!-- BLOCO 3: MODAL DE REVISÃO -->
  <div class="bloco" id="blocoRevisaoModal">
    <div id="revisaoModal" class="revisao-container">
      <textarea id="mensagemRevisao" placeholder="Onde você parou..." rows="3"></textarea>
      <label><input type="checkbox" id="marcarRevisao"> Marcar revisão futura</label>
      <button id="salvarRevisao">Salvar</button>
    </div>
  </div>

  <!-- BLOCO 4: HISTÓRICO ORIGINAL -->
   
  <div class="bloco" id="blocoHistorico">
    <div class="historico-list" id="historicoList"><h3>Histórico de Estudo</h3></div>
  </div>

  <!-- BLOCO 5: REVISÕES DE HOJE -->
  <div class="bloco" id="blocoRevisoesHoje">
    <div class="revisoes-hoje-list" id="revisoesHojeList">
      <h3>Revisões de hoje</h3>
    </div>
  </div>

  <!-- BLOCO 6: HISTÓRICO DE REVISÕES FINALIZADAS -->
  <div class="bloco" id="blocoFinalizado">
    <div class="historico-finalizado" id="historicoFinalizado">
      <h3>Histórico de Revisões Finalizadas</h3>
    </div>
  </div>

</div>

<!-- SORTABLE.JS -->
<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
<script>
  new Sortable(editor, {
    animation: 150,
    handle: '.bloco',
    ghostClass: 'sortable-ghost'
  });
</script>

<!-- ===== SCRIPT ORIGINAL COM CORREÇÃO ===== -->
<script>
/* ===== VARIÁVEIS GLOBAIS ===== */
const addBtn = document.getElementById('addBtn');
const materiasList = document.getElementById('materiasList');
const timerMateria = document.getElementById('timerMateria');
const historicoList = document.getElementById('historicoList');
const revisaoModal = document.getElementById('revisaoModal');
const mensagemRevisao = document.getElementById('mensagemRevisao');
const marcarRevisao = document.getElementById('marcarRevisao');
const salvarRevisao = document.getElementById('salvarRevisao');
const revisoesHojeList = document.getElementById('revisoesHojeList');
const historicoFinalizado = document.getElementById('historicoFinalizado');

let materias = [];
let materiaAtual = null;
let totalSeconds=0;
let remainingSeconds=0;
let interval=null;

/* ===== BLOCO 7.1: ADICIONAR MATÉRIAS ===== */
addBtn.addEventListener('click', () => {
  const nome = document.getElementById('materiaInput').value.trim();
  const peso = parseInt(document.getElementById('peso').value, 10);
  if (!nome) return;

  const item = document.createElement('div');
  item.className = 'materia-item';
  const info = document.createElement('span');
  info.textContent = `${nome} (Peso: ${peso})`;

  const buttonsDiv = document.createElement('div');
  const editBtn = document.createElement('button');
  editBtn.textContent = 'Editar';
  editBtn.onclick = () => {
    const novoNome = prompt('Editar matéria:', nome);
    const novoPeso = parseInt(prompt('Editar peso:', peso), 10);
    if (novoNome && novoPeso) {
      info.textContent = `${novoNome} (Peso: ${novoPeso})`;
      const idx = materias.findIndex(m => m.nome === nome);
      materias[idx] = { nome: novoNome, peso: novoPeso, ciclos: materias[idx].ciclos, revisoes: materias[idx].revisoes };
      updateTimerOptions();
    }
  };

  const delBtn = document.createElement('button');
  delBtn.textContent = 'Excluir';
  delBtn.onclick = () => {
    materiasList.removeChild(item);
    materias = materias.filter(m => m.nome !== nome);
    updateTimerOptions();
  };

  buttonsDiv.appendChild(editBtn);
  buttonsDiv.appendChild(delBtn);
  item.appendChild(info);
  item.appendChild(buttonsDiv);
  materiasList.appendChild(item);

  materias.push({ nome, peso, ciclos: 0, revisoes: [] });
  updateTimerOptions();
  document.getElementById('materiaInput').value = '';
});

/* ===== BLOCO 7.2: ATUALIZAÇÃO DOS DROPDOWNS ===== */
function updateTimerOptions() {
  timerMateria.innerHTML = '<option value="">Selecionar matéria</option>';
  materias.forEach(m => {
    const option = document.createElement('option');
    option.value = m.nome;
    option.text = `${m.nome} (Peso: ${m.peso})`;
    timerMateria.appendChild(option);
  });
}

/* ===== BLOCO 7.3: ESCOLHER MATÉRIA COM HISTÓRICO ===== */
function escolherMateriaComHistorico() {
  const k = 2;
  const pesosAjustados = materias.map(m => m.peso * (1 + m.ciclos/k));
  const somaPesos = pesosAjustados.reduce((a,b)=>a+b,0);
  const rand = Math.random() * somaPesos;
  let acumulado = 0;
  for (let i=0;i<materias.length;i++){
    acumulado += pesosAjustados[i];
    if(rand<=acumulado){
      materias.forEach((m,j)=> { m.ciclos += (i===j ? 0 : 1); });
      materias[i].ciclos=0;
      return materias[i].nome;
    }
  }
  return null;
}

/* ===== BLOCO 7.4: DISPLAY TIMER PRINCIPAL ===== */
function updateDisplay(){
  let mins=String(Math.floor(remainingSeconds/60)).padStart(2,'0');
  let secs=String(remainingSeconds%60).padStart(2,'0');
  document.getElementById('timer').textContent=`${mins}:${secs}`;
}

/* ===== BLOCO 7.5: HISTÓRICO ORIGINAL ===== */
function adicionarHistorico(materiaObj, mensagem=null){
  const hist=document.createElement('div');
  hist.className='historico-item';
  let texto=`${new Date().toLocaleTimeString()}: ${materiaObj.nome}`;
  if(mensagem) texto+=` - ${mensagem}`;
  if(materiaObj.revisoes && materiaObj.revisoes.length>0){
    texto+=` | Revisões: ${materiaObj.revisoes.map(d=>d.toLocaleDateString()).join(', ')}`;
  }
  hist.textContent = texto;
  historicoList.prepend(hist);
}

/* ===== BLOCO 7.6: REVISÕES DE HOJE ===== */
function atualizarRevisoesHoje() {
  const hoje = new Date().toDateString();
  revisoesHojeList.innerHTML = '<h3>Revisões de hoje</h3>';

  materias.forEach(m => {
    const revisoesDoDia = m.revisoes.filter(d => new Date(d).toDateString() === hoje);
    revisoesDoDia.forEach(d => {
      const item = document.createElement('div');
      item.className = 'revisao-hoje-item';

      const timerDiv = document.createElement('div');
      timerDiv.className = 'timer-item';
      timerDiv.textContent = '00:00';

      item.innerHTML = `
        ${m.nome} - ${new Date(d).toLocaleTimeString()}
        <select class="tempoRevisao">
          ${[...Array(12)].map((_,i)=>`<option value="${(i+1)*10}">${(i+1)*10} min</option>`).join('')}
        </select>
        <div class="timer-buttons">
          <button class="iniciarRevisao">Iniciar</button>
          <button class="pausarRevisao">Pausar</button>
          <button class="continuarRevisao">Continuar</button>
          <button class="finalizarRevisao">Finalizar</button>
        </div>
      `;
      item.appendChild(timerDiv);
      revisoesHojeList.appendChild(item);

      /* ===== BLOCO 7.6.1: LOGICA DO TIMER DA REVISÃO ===== */
      let intervalItem=null;
      let remaining=0;

      const iniciarBtn = item.querySelector('.iniciarRevisao');
      const pausarBtn = item.querySelector('.pausarRevisao');
      const continuarBtn = item.querySelector('.continuarRevisao');
      const finalizarBtn = item.querySelector('.finalizarRevisao');

      const criarFormularioDificuldade = () => {
        let form = item.querySelector('.dificuldade-container');
        if(form) return form;
        form = document.createElement('div');
        form.className = 'dificuldade-container';
        form.innerHTML = `
          <label>Dificuldade:</label>
          <select class="dificuldadeSelect">
            ${[...Array(10)].map((_,i)=>`<option value="${i+1}">${i+1}</option>`).join('')}
          </select>
          <label>Acertos:</label>
          <select class="acertosSelect">
            ${[...Array(30)].map((_,i)=>`<option value="${i+1}">${i+1}</option>`).join('')}
          </select>
          <button class="salvarDificuldade">Salvar</button>
        `;
        item.appendChild(form);

        form.querySelector('.salvarDificuldade').onclick = () => {
          const dificuldade = form.querySelector('.dificuldadeSelect').value;
          const acertos = form.querySelector('.acertosSelect').value;
          const textoHistorico = `${new Date().toLocaleTimeString()} - ${m.nome} | Dificuldade: ${dificuldade} | Acertos: ${acertos}`;
          const histItem = document.createElement('div');
          histItem.className = 'historico-item';
          histItem.textContent = textoHistorico;
          historicoFinalizado.prepend(histItem);
          form.remove();
        };
        return form;
      };

      const finalizarTimer = () => {
        clearInterval(intervalItem);
        timerDiv.textContent='00:00';
        criarFormularioDificuldade();
        item.remove(); // <<< removendo da lista "Revisões de hoje"
      };

      iniciarBtn.onclick = () => {
        remaining = parseInt(item.querySelector('.tempoRevisao').value,10)*60;
        clearInterval(intervalItem);
        intervalItem=setInterval(()=>{
          if(remaining>0){
            remaining--;
            const mins=String(Math.floor(remaining/60)).padStart(2,'0');
            const secs=String(remaining%60).padStart(2,'0');
            timerDiv.textContent = `${mins}:${secs}`;
          } else { finalizarTimer(); alert('Tempo da revisão terminou!'); }
        },1000);
      };

      pausarBtn.onclick = () => { clearInterval(intervalItem); };
      continuarBtn.onclick = () => {
        clearInterval(intervalItem);
        intervalItem=setInterval(()=>{
          if(remaining>0){
            remaining--;
            const mins=String(Math.floor(remaining/60)).padStart(2,'0');
            const secs=String(remaining%60).padStart(2,'0');
            timerDiv.textContent = `${mins}:${secs}`;
          } else { finalizarTimer(); alert('Tempo da revisão terminou!'); }
        },1000);
      };
      finalizarBtn.onclick = finalizarTimer;
    });
  });
}

/* ===== BLOCO 7.7: MODAL DE REVISÃO ===== */
function mostrarModal(){ revisaoModal.style.display='flex'; }
function esconderModal(){ revisaoModal.style.display='none'; }

function salvarRevisaoFunc(){
  if(!materiaAtual) return;
  const materiaObj = materias.find(m=>m.nome===materiaAtual);
  if(!materiaObj) return;

  const hoje = new Date();
  materiaObj.revisoes.push(hoje);

  if(marcarRevisao.checked){
    materiaObj.revisoes.push(
        new Date(hoje.getTime()+1*24*60*60*1000),
        new Date(hoje.getTime()+15*24*60*60*1000),
        new Date(hoje.getTime()+30*24*60*60*1000),
        new Date(hoje.getTime()+45*24*60*60*1000)
    );
  }

  adicionarHistorico(materiaObj, mensagemRevisao.value);
  atualizarRevisoesHoje();
  esconderModal();
  mensagemRevisao.value='';
  marcarRevisao.checked=false;
}

salvarRevisao.addEventListener('click', salvarRevisaoFunc);

/* ===== BLOCO 7.8: TIMER PRINCIPAL ===== */
function iniciarTimer(){
  let minutes=parseInt(document.getElementById('minutes').value,10);
  totalSeconds=minutes*60;
  remainingSeconds=totalSeconds;
  materiaAtual=escolherMateriaComHistorico();
  if(materiaAtual){ timerMateria.value=materiaAtual; }
  updateDisplay();
  clearInterval(interval);
  interval=setInterval(()=>{
    if(remainingSeconds>0){ remainingSeconds--; updateDisplay(); }
    else { clearInterval(interval); mostrarModal(); }
  },1000);
}

document.getElementById('startBtn').addEventListener('click',iniciarTimer);
document.getElementById('pauseBtn').addEventListener('click',()=>{ clearInterval(interval); mostrarModal(); });
document.getElementById('resumeBtn').addEventListener('click',()=>{
  esconderModal();
  clearInterval(interval);
  interval=setInterval(()=>{
    if(remainingSeconds>0){ remainingSeconds--; updateDisplay(); }
    else{ clearInterval(interval); mostrarModal(); }
  },1000);
});
document.getElementById('stopBtn').addEventListener('click',()=>{ clearInterval(interval); remainingSeconds=0; updateDisplay(); mostrarModal(); });

</script>
</body>
</html>

------------------------------------------------------------------------------------------------------------

<!DOCTYPE html>
<html lang="pt-BR">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Timer com Histórico e Revisões - Drag & Drop</title>
<style>
  body { font-family: Arial, sans-serif; background-color: #f4f4f4; display:flex; flex-direction:column; justify-content:center; align-items:center; gap:20px; }
  .bloco { background:white; padding:15px; border-radius:10px; box-shadow:0 4px 8px rgba(0,0,0,0.1); width:350px; display:flex; flex-direction:column; gap:5px; cursor:move; }
  input[type="text"], select, input[type="number"], textarea { padding:10px; font-size:16px; border:1px solid #ccc; border-radius:5px; width:100%; box-sizing:border-box; }
  button { padding:5px 10px; background-color:#4CAF50; color:white; border:none; border-radius:5px; font-size:14px; cursor:pointer; transition: background-color 0.3s; }
  button:hover { background-color:#45a049; }
  .materia-item, .historico-item, .revisao-hoje-item { display:flex; flex-direction:column; justify-content:space-between; padding:5px 10px; border-bottom:1px solid #eee; }
  .materia-buttons button { margin-left:5px; padding:3px 8px; font-size:12px; }
  .selected { background-color:#d1e7dd; border-radius:5px; }
  .revisao-container { display:none; flex-direction:column; gap:5px; margin-top:10px; width:100%; }
  .timer-item { font-size:14px; font-weight:bold; margin-top:5px; }
  .timer-buttons { display:flex; gap:5px; margin-top:5px; }
  .dificuldade-container { display:flex; flex-direction:column; gap:5px; margin-top:5px; }
</style>
</head>
<body>

<div id="editor">

  <!-- BLOCO 1: ADICIONAR MATÉRIAS -->
  <div class="bloco" id="blocoAdicionar">
    <input type="text" id="materiaInput" placeholder="Digite a matéria" />
    <label for="peso">Peso:</label>
    <select id="peso">
      <option value="1">1</option>
      <option value="2">2</option>
      <option value="3">3</option>
      <option value="4">4</option>
      <option value="5">5</option>
    </select>
    <button id="addBtn">Adicionar</button>
    <div class="materias-list" id="materiasList"></div>
  </div>

  <!-- BLOCO 2: TIMER PRINCIPAL -->
  <div class="bloco" id="blocoTimer">
    <div class="time-input">
      <label for="minutes">Minutos:</label>
      <input type="number" id="minutes" min="10" step="10" value="10">
    </div>
    <div class="timer-container" style="display:flex; gap:10px; align-items:center;">
      <div class="timer" id="timer">00:00</div>
      <select id="timerMateria">
        <option value="">Selecionar matéria</option>
      </select>
    </div>
    <div class="controls" style="display:flex; gap:10px;">
      <button id="startBtn">Iniciar</button>
      <button id="pauseBtn">Pausar</button>
      <button id="resumeBtn">Continuar</button>
      <button id="stopBtn">Finalizar</button>
    </div>
  </div>

  <!-- BLOCO 3: MODAL DE REVISÃO -->
  <div class="bloco" id="blocoRevisaoModal">
    <div id="revisaoModal" class="revisao-container">
      <textarea id="mensagemRevisao" placeholder="Onde você parou..." rows="3"></textarea>
      <label><input type="checkbox" id="marcarRevisao"> Marcar revisão futura</label>
      <button id="salvarRevisao">Salvar</button>
    </div>
  </div>

  <!-- BLOCO 4: HISTÓRICO ORIGINAL -->
  <div class="bloco" id="blocoHistorico">
    <div class="historico-list" id="historicoList"><h3>Histórico de Estudo</h3></div>
  </div>

  <!-- BLOCO 5: REVISÕES DE HOJE -->
  <div class="bloco" id="blocoRevisoesHoje">
    <div class="revisoes-hoje-list" id="revisoesHojeList">
      <h3>Revisões de hoje</h3>
    </div>
  </div>

  <!-- BLOCO 6: HISTÓRICO DE REVISÕES FINALIZADAS -->
  <div class="bloco" id="blocoFinalizado">
    <div class="historico-finalizado" id="historicoFinalizado">
      <h3>Histórico de Revisões Finalizadas</h3>
    </div>
  </div>

</div>

<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
<script>
  new Sortable(editor, {
    animation: 150,
    handle: '.bloco',
    ghostClass: 'sortable-ghost'
  });
</script>

<script>
const addBtn = document.getElementById('addBtn');
const materiasList = document.getElementById('materiasList');
const timerMateria = document.getElementById('timerMateria');
const historicoList = document.getElementById('historicoList');
const revisaoModal = document.getElementById('revisaoModal');
const mensagemRevisao = document.getElementById('mensagemRevisao');
const marcarRevisao = document.getElementById('marcarRevisao');
const salvarRevisao = document.getElementById('salvarRevisao');
const revisoesHojeList = document.getElementById('revisoesHojeList');
const historicoFinalizado = document.getElementById('historicoFinalizado');

let materias = [];
let materiaAtual = null;
let totalSeconds=0;
let remainingSeconds=0;
let interval=null;

/* ===== ADICIONAR MATÉRIAS ===== */
addBtn.addEventListener('click', () => {
  const nome = document.getElementById('materiaInput').value.trim();
  const peso = parseInt(document.getElementById('peso').value, 10);
  if (!nome) return;

  const item = document.createElement('div');
  item.className = 'materia-item';
  const info = document.createElement('span');
  info.textContent = `${nome} (Peso: ${peso})`;

  const buttonsDiv = document.createElement('div');
  const editBtn = document.createElement('button');
  editBtn.textContent = 'Editar';
  editBtn.onclick = () => {
    const novoNome = prompt('Editar matéria:', nome);
    const novoPeso = parseInt(prompt('Editar peso:', peso), 10);
    if (novoNome && novoPeso) {
      info.textContent = `${novoNome} (Peso: ${novoPeso})`;
      const idx = materias.findIndex(m => m.nome === nome);
      materias[idx] = { nome: novoNome, peso: novoPeso, ciclos: materias[idx].ciclos, revisoes: materias[idx].revisoes };
      updateTimerOptions();
    }
  };

  const delBtn = document.createElement('button');
  delBtn.textContent = 'Excluir';
  delBtn.onclick = () => {
    materiasList.removeChild(item);
    materias = materias.filter(m => m.nome !== nome);
    updateTimerOptions();
  };

  buttonsDiv.appendChild(editBtn);
  buttonsDiv.appendChild(delBtn);
  item.appendChild(info);
  item.appendChild(buttonsDiv);
  materiasList.appendChild(item);

  materias.push({ nome, peso, ciclos: 0, revisoes: [] });
  updateTimerOptions();
  document.getElementById('materiaInput').value = '';
});

function updateTimerOptions() {
  timerMateria.innerHTML = '<option value="">Selecionar matéria</option>';
  materias.forEach(m => {
    const option = document.createElement('option');
    option.value = m.nome;
    option.text = `${m.nome} (Peso: ${m.peso})`;
    timerMateria.appendChild(option);
  });
}

function escolherMateriaComHistorico() {
  const k = 2;
  const pesosAjustados = materias.map(m => m.peso * (1 + m.ciclos/k));
  const somaPesos = pesosAjustados.reduce((a,b)=>a+b,0);
  const rand = Math.random() * somaPesos;
  let acumulado = 0;
  for (let i=0;i<materias.length;i++){
    acumulado += pesosAjustados[i];
    if(rand<=acumulado){
      materias.forEach((m,j)=> { m.ciclos += (i===j ? 0 : 1); });
      materias[i].ciclos=0;
      return materias[i].nome;
    }
  }
  return null;
}

function updateDisplay(){
  let mins=String(Math.floor(remainingSeconds/60)).padStart(2,'0');
  let secs=String(remainingSeconds%60).padStart(2,'0');
  document.getElementById('timer').textContent=`${mins}:${secs}`;
}

function adicionarHistorico(materiaObj, mensagem=null){
  const hist=document.createElement('div');
  hist.className='historico-item';
  let texto=`${new Date().toLocaleTimeString()}: ${materiaObj.nome}`;
  if(mensagem) texto+=` - ${mensagem}`;
  if(materiaObj.revisoes && materiaObj.revisoes.length>0){
    texto+=` | Revisões: ${materiaObj.revisoes.map(d=>d.toLocaleDateString()).join(', ')}`;
  }
  hist.textContent = texto;
  historicoList.prepend(hist);
}

/* ===== REVISÕES DE HOJE ===== */
function atualizarRevisoesHoje() {
  const hoje = new Date().toDateString();
  revisoesHojeList.innerHTML = '<h3>Revisões de hoje</h3>';

  materias.forEach(m => {
    const revisoesDoDia = m.revisoes.filter(d => new Date(d).toDateString() === hoje);
    revisoesDoDia.forEach(d => {
      const item = document.createElement('div');
      item.className = 'revisao-hoje-item';

      const timerDiv = document.createElement('div');
      timerDiv.className = 'timer-item';
      timerDiv.textContent = '00:00';

      item.innerHTML = `
        ${m.nome} - ${new Date(d).toLocaleTimeString()}
        <select class="tempoRevisao">
          ${[...Array(12)].map((_,i)=>`<option value="${(i+1)*10}">${(i+1)*10} min</option>`).join('')}
        </select>
        <div class="timer-buttons">
          <button class="iniciarRevisao">Iniciar</button>
          <button class="pausarRevisao">Pausar</button>
          <button class="continuarRevisao">Continuar</button>
          <button class="finalizarRevisao">Finalizar</button>
        </div>
      `;
      item.appendChild(timerDiv);
      revisoesHojeList.appendChild(item);

      let intervalItem=null;
      let remaining=0;

      const iniciarBtn = item.querySelector('.iniciarRevisao');
      const pausarBtn = item.querySelector('.pausarRevisao');
      const continuarBtn = item.querySelector('.continuarRevisao');
      const finalizarBtn = item.querySelector('.finalizarRevisao');

      const criarFormularioDificuldade = () => {
        let form = item.querySelector('.dificuldade-container');
        if(form) return form;
        form = document.createElement('div');
        form.className = 'dificuldade-container';
        form.innerHTML = `
          <label>Dificuldade:</label>
          <select class="dificuldadeSelect">
            ${[...Array(10)].map((_,i)=>`<option value="${i+1}">${i+1}</option>`).join('')}
          </select>
          <label>Acertos:</label>
          <select class="acertosSelect">
            ${[...Array(30)].map((_,i)=>`<option value="${i+1}">${i+1}</option>`).join('')}
          </select>
          <button class="salvarDificuldade">Salvar</button>
        `;
        item.appendChild(form);

        form.querySelector('.salvarDificuldade').onclick = () => {
          const dificuldade = form.querySelector('.dificuldadeSelect').value;
          const acertos = form.querySelector('.acertosSelect').value;
          const textoHistorico = `${new Date().toLocaleTimeString()} - ${m.nome} | Dificuldade: ${dificuldade} | Acertos: ${acertos}`;
          const histItem = document.createElement('div');
          histItem.className = 'historico-item';
          histItem.textContent = textoHistorico;
          historicoFinalizado.prepend(histItem);
          item.remove();
        };
        return form;
      };

      const finalizarTimer = () => {
        clearInterval(intervalItem);
        timerDiv.textContent='00:00';
        criarFormularioDificuldade();
      };

      iniciarBtn.onclick = () => {
        remaining = parseInt(item.querySelector('.tempoRevisao').value,10)*60;
        clearInterval(intervalItem);
        intervalItem=setInterval(()=>{
          if(remaining>0){
            remaining--;
            const mins=String(Math.floor(remaining/60)).padStart(2,'0');
            const secs=String(remaining%60).padStart(2,'0');
            timerDiv.textContent = `${mins}:${secs}`;
          } else { finalizarTimer(); alert('Tempo da revisão terminou!'); }
        },1000);
      };

      pausarBtn.onclick = () => { clearInterval(intervalItem); };
      continuarBtn.onclick = () => {
        clearInterval(intervalItem);
        intervalItem=setInterval(()=>{
          if(remaining>0){
            remaining--;
            const mins=String(Math.floor(remaining/60)).padStart(2,'0');
            const secs=String(remaining%60).padStart(2,'0');
            timerDiv.textContent = `${mins}:${secs}`;
          } else { finalizarTimer(); alert('Tempo da revisão terminou!'); }
        },1000);
      };
      finalizarBtn.onclick = finalizarTimer;
    });
  });
}

/* ===== MODAL DE REVISÃO ===== */
function mostrarModal(){ revisaoModal.style.display='flex'; }
function esconderModal(){ revisaoModal.style.display='none'; }

function salvarRevisaoFunc(){
  if(!materiaAtual) return;
  const materiaObj = materias.find(m=>m.nome===materiaAtual);
  if(!materiaObj) return;

  const hoje = new Date();
  materiaObj.revisoes.push(hoje);

  if(marcarRevisao.checked){
    materiaObj.revisoes.push(
        new Date(hoje.getTime()+1*24*60*60*1000),
        new Date(hoje.getTime()+15*24*60*60*1000),
        new Date(hoje.getTime()+30*24*60*60*1000),
        new Date(hoje.getTime()+45*24*60*60*1000)
    );
  }

  adicionarHistorico(materiaObj, mensagemRevisao.value);
  atualizarRevisoesHoje();
  esconderModal();
  mensagemRevisao.value='';
  marcarRevisao.checked=false;
}

salvarRevisao.addEventListener('click', salvarRevisaoFunc);

/* ===== TIMER PRINCIPAL ===== */
function iniciarTimer(){
  let minutes=parseInt(document.getElementById('minutes').value,10);
  totalSeconds=minutes*60;
  remainingSeconds=totalSeconds;
  materiaAtual=escolherMateriaComHistorico();
  if(materiaAtual){ timerMateria.value=materiaAtual; }
  updateDisplay();
  clearInterval(interval);
  interval=setInterval(()=>{
    if(remainingSeconds>0){ remainingSeconds--; updateDisplay(); }
    else { clearInterval(interval); mostrarModal(); }
  },1000);
}

document.getElementById('startBtn').addEventListener('click',iniciarTimer);
document.getElementById('pauseBtn').addEventListener('click',()=>{ clearInterval(interval); mostrarModal(); });
document.getElementById('resumeBtn').addEventListener('click',()=>{
  esconderModal();
  clearInterval(interval);
  interval=setInterval(()=>{
    if(remainingSeconds>0){ remainingSeconds--; updateDisplay(); }
    else{ clearInterval(interval); mostrarModal(); }
  },1000);
});
document.getElementById('stopBtn').addEventListener('click',()=>{ clearInterval(interval); remainingSeconds=0; updateDisplay(); mostrarModal(); });

</script>
</body>
</html>


_--------------------------------------------------------------------------------------------------------------

<!DOCTYPE html>
<html lang="pt-BR">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Timer com Histórico e Revisões - Drag & Drop</title>
<style>
  body { font-family: Arial, sans-serif; background-color: #f4f4f4; display:flex; flex-direction:column; justify-content:center; align-items:center; gap:20px; }
  .bloco { background:white; padding:15px; border-radius:10px; box-shadow:0 4px 8px rgba(0,0,0,0.1); width:350px; display:flex; flex-direction:column; gap:5px; cursor:move; }
  input[type="text"], select, input[type="number"], textarea { padding:10px; font-size:16px; border:1px solid #ccc; border-radius:5px; width:100%; box-sizing:border-box; }
  button { padding:5px 10px; background-color:#4CAF50; color:white; border:none; border-radius:5px; font-size:14px; cursor:pointer; transition: background-color 0.3s; }
  button:hover { background-color:#45a049; }
  .materia-item, .historico-item, .revisao-hoje-item { display:flex; flex-direction:column; justify-content:space-between; padding:5px 10px; border-bottom:1px solid #eee; }
  .materia-buttons button { margin-left:5px; padding:3px 8px; font-size:12px; }
  .selected { background-color:#d1e7dd; border-radius:5px; }
  .revisao-container { display:none; flex-direction:column; gap:5px; margin-top:10px; width:100%; }
  .timer-item { font-size:14px; font-weight:bold; margin-top:5px; }
  .timer-buttons { display:flex; gap:5px; margin-top:5px; }
  .dificuldade-container { display:flex; flex-direction:column; gap:5px; margin-top:5px; }
</style>
</head>
<body>

<div id="editor">

  <!-- BLOCO 1: ADICIONAR MATÉRIAS -->
  <div class="bloco" id="blocoAdicionar">
    <input type="text" id="materiaInput" placeholder="Digite a matéria" />
    <label for="peso">Peso:</label>
    <select id="peso">
      <option value="1">1</option>
      <option value="2">2</option>
      <option value="3">3</option>
      <option value="4">4</option>
      <option value="5">5</option>
    </select>
    <button id="addBtn">Adicionar</button>
    <div class="materias-list" id="materiasList"></div>
  </div>

  <!-- BLOCO 2: TIMER PRINCIPAL -->
  <div class="bloco" id="blocoTimer">
    <div class="time-input">
      <label for="minutes">Minutos:</label>
      <input type="number" id="minutes" min="10" step="10" value="10">
    </div>
    <div class="timer-container" style="display:flex; gap:10px; align-items:center;">
      <div class="timer" id="timer">00:00</div>
      <select id="timerMateria">
        <option value="">Selecionar matéria</option>
      </select>
    </div>
    <div class="controls" style="display:flex; gap:10px;">
      <button id="startBtn">Iniciar</button>
      <button id="pauseBtn">Pausar</button>
      <button id="resumeBtn">Continuar</button>
      <button id="stopBtn">Finalizar</button>
    </div>
  </div>

  <!-- BLOCO 3: MODAL DE REVISÃO -->
  <div class="bloco" id="blocoRevisaoModal">
    <div id="revisaoModal" class="revisao-container">
      <textarea id="mensagemRevisao" placeholder="Onde você parou..." rows="3"></textarea>
      <label><input type="checkbox" id="marcarRevisao"> Marcar revisão futura</label>
      <button id="salvarRevisao">Salvar</button>
    </div>
  </div>

  <!-- BLOCO 4: HISTÓRICO ORIGINAL -->
  <div class="bloco" id="blocoHistorico">
    <div class="historico-list" id="historicoList"><h3>Histórico de Estudo</h3></div>
  </div>

  <!-- BLOCO 5: REVISÕES DE HOJE -->
  <div class="bloco" id="blocoRevisoesHoje">
    <div class="revisoes-hoje-list" id="revisoesHojeList">
      <h3>Revisões de hoje</h3>
    </div>
  </div>

  <!-- BLOCO 6: HISTÓRICO DE REVISÕES FINALIZADAS -->
  <div class="bloco" id="blocoFinalizado">
    <div class="historico-finalizado" id="historicoFinalizado">
      <h3>Histórico de Revisões Finalizadas</h3>
    </div>
  </div>

</div>

<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
<script>
  new Sortable(editor, {
    animation: 150,
    handle: '.bloco',
    ghostClass: 'sortable-ghost'
  });
</script>

<script>
const addBtn = document.getElementById('addBtn');
const materiasList = document.getElementById('materiasList');
const timerMateria = document.getElementById('timerMateria');
const historicoList = document.getElementById('historicoList');
const revisaoModal = document.getElementById('revisaoModal');
const mensagemRevisao = document.getElementById('mensagemRevisao');
const marcarRevisao = document.getElementById('marcarRevisao');
const salvarRevisao = document.getElementById('salvarRevisao');
const revisoesHojeList = document.getElementById('revisoesHojeList');
const historicoFinalizado = document.getElementById('historicoFinalizado');

let materias = [];
let materiaAtual = null;
let totalSeconds=0;
let remainingSeconds=0;
let interval=null;
let endTime=null; // horário de término do timer

/* ===== LOCALSTORAGE ===== */
function salvarDados() {
  const dados = {
    materias,
    historico: historicoList.innerHTML,
    revisoesHoje: revisoesHojeList.innerHTML,
    historicoFinalizado: historicoFinalizado.innerHTML,
    materiaAtual,
    totalSeconds,
    remainingSeconds,
    endTime
  };
  localStorage.setItem("estudoData", JSON.stringify(dados));
}

function carregarDados() {
  const dadosStr = localStorage.getItem("estudoData");
  if (!dadosStr) return;
  const dados = JSON.parse(dadosStr);

  materias = dados.materias || [];
  materiaAtual = dados.materiaAtual || null;
  totalSeconds = dados.totalSeconds || 0;
  remainingSeconds = dados.remainingSeconds || 0;
  endTime = dados.endTime || null;

  historicoList.innerHTML = dados.historico || "<h3>Histórico de Estudo</h3>";
  revisoesHojeList.innerHTML = dados.revisoesHoje || "<h3>Revisões de hoje</h3>";
  historicoFinalizado.innerHTML = dados.historicoFinalizado || "<h3>Histórico de Revisões Finalizadas</h3>";

  reconstruirListaMaterias();
  updateTimerOptions();

  if(endTime){
    const agora = Date.now();
    const diff = Math.floor((new Date(endTime).getTime() - agora) / 1000);
    if(diff > 0){
      remainingSeconds = diff;
      iniciarContagem();
    } else {
      remainingSeconds = 0;
      updateDisplay();
      mostrarModal();
    }
  }
}

/* ===== RECONSTRUIR LISTA VISUAL DAS MATÉRIAS ===== */
function reconstruirListaMaterias(){
  materiasList.innerHTML = '';
  materias.forEach(m => {
    const item = document.createElement('div');
    item.className = 'materia-item';
    const info = document.createElement('span');
    info.textContent = `${m.nome} (Peso: ${m.peso})`;

    const buttonsDiv = document.createElement('div');
    const editBtn = document.createElement('button');
    editBtn.textContent = 'Editar';
    editBtn.onclick = () => {
      const novoNome = prompt('Editar matéria:', m.nome);
      const novoPeso = parseInt(prompt('Editar peso:', m.peso), 10);
      if(novoNome && novoPeso){
        info.textContent = `${novoNome} (Peso: ${novoPeso})`;
        const idx = materias.findIndex(mat => mat.nome === m.nome);
        materias[idx] = { nome: novoNome, peso: novoPeso, ciclos: materias[idx].ciclos, revisoes: materias[idx].revisoes };
        updateTimerOptions();
        salvarDados();
      }
    };

    const delBtn = document.createElement('button');
    delBtn.textContent = 'Excluir';
    delBtn.onclick = () => {
      materiasList.removeChild(item);
      materias = materias.filter(mat => mat.nome !== m.nome);
      updateTimerOptions();
      salvarDados();
    };

    buttonsDiv.appendChild(editBtn);
    buttonsDiv.appendChild(delBtn);
    item.appendChild(info);
    item.appendChild(buttonsDiv);
    materiasList.appendChild(item);
  });
}

/* ===== ADICIONAR MATÉRIAS ===== */
addBtn.addEventListener('click', () => {
  const nome = document.getElementById('materiaInput').value.trim();
  const peso = parseInt(document.getElementById('peso').value, 10);
  if (!nome) return;

  const item = document.createElement('div');
  item.className = 'materia-item';
  const info = document.createElement('span');
  info.textContent = `${nome} (Peso: ${peso})`;

  const buttonsDiv = document.createElement('div');
  const editBtn = document.createElement('button');
  editBtn.textContent = 'Editar';
  editBtn.onclick = () => {
    const novoNome = prompt('Editar matéria:', nome);
    const novoPeso = parseInt(prompt('Editar peso:', peso), 10);
    if (novoNome && novoPeso) {
      info.textContent = `${novoNome} (Peso: ${novoPeso})`;
      const idx = materias.findIndex(m => m.nome === nome);
      materias[idx] = { nome: novoNome, peso: novoPeso, ciclos: materias[idx].ciclos, revisoes: materias[idx].revisoes };
      updateTimerOptions();
      salvarDados();
    }
  };

  const delBtn = document.createElement('button');
  delBtn.textContent = 'Excluir';
  delBtn.onclick = () => {
    materiasList.removeChild(item);
    materias = materias.filter(m => m.nome !== nome);
    updateTimerOptions();
    salvarDados();
  };

  buttonsDiv.appendChild(editBtn);
  buttonsDiv.appendChild(delBtn);
  item.appendChild(info);
  item.appendChild(buttonsDiv);
  materiasList.appendChild(item);

  materias.push({ nome, peso, ciclos: 0, revisoes: [] });
  updateTimerOptions();
  document.getElementById('materiaInput').value = '';
  salvarDados();
});

/* ===== RESTANTE DO CÓDIGO (SEM ALTERAÇÃO) ===== */
function updateTimerOptions() {
  timerMateria.innerHTML = '<option value="">Selecionar matéria</option>';
  materias.forEach(m => {
    const option = document.createElement('option');
    option.value = m.nome;
    option.text = `${m.nome} (Peso: ${m.peso})`;
    timerMateria.appendChild(option);
  });
}

function escolherMateriaComHistorico() {
  const k = 2;
  const pesosAjustados = materias.map(m => m.peso * (1 + m.ciclos/k));
  const somaPesos = pesosAjustados.reduce((a,b)=>a+b,0);
  const rand = Math.random() * somaPesos;
  let acumulado = 0;
  for (let i=0;i<materias.length;i++){
    acumulado += pesosAjustados[i];
    if(rand<=acumulado){
      materias.forEach((m,j)=> { m.ciclos += (i===j ? 0 : 1); });
      materias[i].ciclos=0;
      return materias[i].nome;
    }
  }
  return null;
}

function updateDisplay(){
  let mins=String(Math.floor(remainingSeconds/60)).padStart(2,'0');
  let secs=String(remainingSeconds%60).padStart(2,'0');
  document.getElementById('timer').textContent=`${mins}:${secs}`;
}

function mostrarModal(){ revisaoModal.style.display='flex'; }
function esconderModal(){ revisaoModal.style.display='none'; }

function salvarRevisaoFunc(){
  if(!materiaAtual) return;
  const materiaObj = materias.find(m=>m.nome===materiaAtual);
  if(!materiaObj) return;

  const hoje = new Date();
  materiaObj.revisoes.push(hoje);

  if(marcarRevisao.checked){
    materiaObj.revisoes.push(
        new Date(hoje.getTime()+1*24*60*60*1000),
        new Date(hoje.getTime()+15*24*60*60*1000),
        new Date(hoje.getTime()+30*24*60*60*1000),
        new Date(hoje.getTime()+45*24*60*60*1000)
    );
  }

  const hist=document.createElement('div');
  hist.className='historico-item';
  hist.textContent=`${new Date().toLocaleTimeString()}: ${materiaObj.nome} - ${mensagemRevisao.value}`;
  historicoList.prepend(hist);

  mensagemRevisao.value='';
  marcarRevisao.checked=false;
  esconderModal();
  atualizarRevisoesHoje();
  salvarDados();
}
salvarRevisao.addEventListener('click', salvarRevisaoFunc);

function iniciarContagem(){
  clearInterval(interval);
  updateDisplay();
  interval=setInterval(()=>{
    if(remainingSeconds>0){
      remainingSeconds--;
      updateDisplay();
      salvarDados();
    } else {
      clearInterval(interval);
      mostrarModal();
      salvarDados();
    }
  },1000);
}

function iniciarTimer(){
  let minutes=parseInt(document.getElementById('minutes').value,10);
  totalSeconds=minutes*60;
  remainingSeconds=totalSeconds;
  materiaAtual=escolherMateriaComHistorico();
  if(materiaAtual){ timerMateria.value=materiaAtual; }

  endTime = new Date(Date.now() + totalSeconds*1000);
  iniciarContagem();
  salvarDados();
}

document.getElementById('startBtn').addEventListener('click',iniciarTimer);
document.getElementById('pauseBtn').addEventListener('click',()=>{ clearInterval(interval); mostrarModal(); salvarDados(); });
document.getElementById('resumeBtn').addEventListener('click',()=>{
  esconderModal();
  if(remainingSeconds>0){
    endTime = new Date(Date.now() + remainingSeconds*1000);
    iniciarContagem();
  }
  salvarDados();
});
document.getElementById('stopBtn').addEventListener('click',()=>{ clearInterval(interval); remainingSeconds=0; updateDisplay(); mostrarModal(); salvarDados(); });

function atualizarRevisoesHoje() {
  const hoje = new Date().toDateString();
  revisoesHojeList.innerHTML = '<h3>Revisões de hoje</h3>';
  materias.forEach(m => {
    const revisoesDoDia = m.revisoes.filter(d => new Date(d).toDateString() === hoje);
    revisoesDoDia.forEach(d => {
      const item = document.createElement('div');
      item.className = 'revisao-hoje-item';
      item.textContent = `${m.nome} - ${new Date(d).toLocaleTimeString()}`;
      revisoesHojeList.appendChild(item);
    });
  });
}

window.onload = () => {
  carregarDados();
  atualizarRevisoesHoje();
  updateDisplay();
};
</script>
</body>
</html>


------------------------------------------------------------------------------------------------------------

<!DOCTYPE html>
<html lang="pt-BR">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Timer com Histórico e Revisões - Drag & Drop</title>
<style>
  body { font-family: Arial, sans-serif; background-color: #f4f4f4; display:flex; flex-direction:column; justify-content:center; align-items:center; gap:20px; }
  .bloco { background:white; padding:15px; border-radius:10px; box-shadow:0 4px 8px rgba(0,0,0,0.1); width:350px; display:flex; flex-direction:column; gap:5px; cursor:move; }
  input[type="text"], select, input[type="number"], textarea { padding:10px; font-size:16px; border:1px solid #ccc; border-radius:5px; width:100%; box-sizing:border-box; }
  button { padding:5px 10px; background-color:#4CAF50; color:white; border:none; border-radius:5px; font-size:14px; cursor:pointer; transition: background-color 0.3s; }
  button:hover { background-color:#45a049; }
  .materia-item, .historico-item, .revisao-hoje-item { display:flex; flex-direction:column; justify-content:space-between; padding:5px 10px; border-bottom:1px solid #eee; }
  .materia-buttons button { margin-left:5px; padding:3px 8px; font-size:12px; }
  .selected { background-color:#d1e7dd; border-radius:5px; }
  .revisao-container { display:none; flex-direction:column; gap:5px; margin-top:10px; width:100%; }
  .timer-item { font-size:14px; font-weight:bold; margin-top:5px; }
  .timer-buttons { display:flex; gap:5px; margin-top:5px; }
  .dificuldade-container { display:flex; flex-direction:column; gap:5px; margin-top:5px; }
</style>
</head>
<body>

<div id="editor">

  <!-- BLOCO 1: ADICIONAR MATÉRIAS -->
  <div class="bloco" id="blocoAdicionar">
    <input type="text" id="materiaInput" placeholder="Digite a matéria" />
    <label for="peso">Peso:</label>
    <select id="peso">
      <option value="1">1</option>
      <option value="2">2</option>
      <option value="3">3</option>
      <option value="4">4</option>
      <option value="5">5</option>
    </select>
    <button id="addBtn">Adicionar</button>
    <div class="materias-list" id="materiasList"></div>
  </div>

  <!-- BLOCO 2: TIMER PRINCIPAL -->
  <div class="bloco" id="blocoTimer">
    <div class="time-input">
      <label for="minutes">Minutos:</label>
      <input type="number" id="minutes" min="10" step="10" value="10">
    </div>
    <div class="timer-container" style="display:flex; gap:10px; align-items:center;">
      <div class="timer" id="timer">00:00</div>
      <select id="timerMateria">
        <option value="">Selecionar matéria</option>
      </select>
    </div>
    <div class="controls" style="display:flex; gap:10px;">
      <button id="startBtn">Iniciar</button>
      <button id="pauseBtn">Pausar</button>
      <button id="resumeBtn">Continuar</button>
      <button id="stopBtn">Finalizar</button>
    </div>
  </div>

  <!-- BLOCO 3: MODAL DE REVISÃO -->
  <div class="bloco" id="blocoRevisaoModal">
    <div id="revisaoModal" class="revisao-container">
      <textarea id="mensagemRevisao" placeholder="Onde você parou..." rows="3"></textarea>
      <label><input type="checkbox" id="marcarRevisao"> Marcar revisão futura</label>
      <button id="salvarRevisao">Salvar</button>
    </div>
  </div>

  <!-- BLOCO 4: HISTÓRICO ORIGINAL -->
  <div class="bloco" id="blocoHistorico">
    <div class="historico-list" id="historicoList"><h3>Histórico de Estudo</h3></div>
  </div>

  <!-- BLOCO 5: REVISÕES DE HOJE -->
  <div class="bloco" id="blocoRevisoesHoje">
    <div class="revisoes-hoje-list" id="revisoesHojeList">
      <h3>Revisões de hoje</h3>
    </div>
  </div>

  <!-- BLOCO 6: HISTÓRICO DE REVISÕES FINALIZADAS -->
  <div class="bloco" id="blocoFinalizado">
    <div class="historico-finalizado" id="historicoFinalizado">
      <h3>Histórico de Revisões Finalizadas</h3>
    </div>
  </div>

</div>

<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
<script>
  new Sortable(editor, {
    animation: 150,
    handle: '.bloco',
    ghostClass: 'sortable-ghost'
  });
</script>

<script>
const addBtn = document.getElementById('addBtn');
const materiasList = document.getElementById('materiasList');
const timerMateria = document.getElementById('timerMateria');
const historicoList = document.getElementById('historicoList');
const revisaoModal = document.getElementById('revisaoModal');
const mensagemRevisao = document.getElementById('mensagemRevisao');
const marcarRevisao = document.getElementById('marcarRevisao');
const salvarRevisao = document.getElementById('salvarRevisao');
const revisoesHojeList = document.getElementById('revisoesHojeList');
const historicoFinalizado = document.getElementById('historicoFinalizado');

let materias = [];
let materiaAtual = null;
let totalSeconds=0;
let remainingSeconds=0;
let interval=null;
let endTime=null; // horário de término do timer

/* ===== LOCALSTORAGE ===== */
function salvarDados() {
  const dados = {
    materias,
    historico: historicoList.innerHTML,
    revisoesHoje: revisoesHojeList.innerHTML,
    historicoFinalizado: historicoFinalizado.innerHTML,
    materiaAtual,
    totalSeconds,
    remainingSeconds,
    endTime
  };
  localStorage.setItem("estudoData", JSON.stringify(dados));
}

function carregarDados() {
  const dadosStr = localStorage.getItem("estudoData");
  if (!dadosStr) return;
  const dados = JSON.parse(dadosStr);

  materias = dados.materias || [];
  materiaAtual = dados.materiaAtual || null;
  totalSeconds = dados.totalSeconds || 0;
  remainingSeconds = dados.remainingSeconds || 0;
  endTime = dados.endTime || null;

  historicoList.innerHTML = dados.historico || "<h3>Histórico de Estudo</h3>";
  revisoesHojeList.innerHTML = dados.revisoesHoje || "<h3>Revisões de hoje</h3>";
  historicoFinalizado.innerHTML = dados.historicoFinalizado || "<h3>Histórico de Revisões Finalizadas</h3>";

  reconstruirListaMaterias();
  updateTimerOptions();

  if(endTime){
    const agora = Date.now();
    const diff = Math.floor((new Date(endTime).getTime() - agora) / 1000);
    if(diff > 0){
      remainingSeconds = diff;
      iniciarContagem();
    } else {
      remainingSeconds = 0;
      updateDisplay();
      mostrarModal();
    }
  }
}

/* ===== RECONSTRUIR LISTA VISUAL DAS MATÉRIAS ===== */
function reconstruirListaMaterias(){
  materiasList.innerHTML = '';
  materias.forEach(m => {
    const item = document.createElement('div');
    item.className = 'materia-item';
    const info = document.createElement('span');
    info.textContent = `${m.nome} (Peso: ${m.peso})`;

    const buttonsDiv = document.createElement('div');
    const editBtn = document.createElement('button');
    editBtn.textContent = 'Editar';
    editBtn.onclick = () => {
      const novoNome = prompt('Editar matéria:', m.nome);
      const novoPeso = parseInt(prompt('Editar peso:', m.peso), 10);
      if(novoNome && novoPeso){
        info.textContent = `${novoNome} (Peso: ${novoPeso})`;
        const idx = materias.findIndex(mat => mat.nome === m.nome);
        materias[idx] = { nome: novoNome, peso: novoPeso, ciclos: materias[idx].ciclos, revisoes: materias[idx].revisoes };
        updateTimerOptions();
        salvarDados();
      }
    };

    const delBtn = document.createElement('button');
    delBtn.textContent = 'Excluir';
    delBtn.onclick = () => {
      materiasList.removeChild(item);
      materias = materias.filter(mat => mat.nome !== m.nome);
      updateTimerOptions();
      salvarDados();
    };

    buttonsDiv.appendChild(editBtn);
    buttonsDiv.appendChild(delBtn);
    item.appendChild(info);
    item.appendChild(buttonsDiv);
    materiasList.appendChild(item);
  });
}

/* ===== ADICIONAR MATÉRIAS ===== */
addBtn.addEventListener('click', () => {
  const nome = document.getElementById('materiaInput').value.trim();
  const peso = parseInt(document.getElementById('peso').value, 10);
  if (!nome) return;

  const item = document.createElement('div');
  item.className = 'materia-item';
  const info = document.createElement('span');
  info.textContent = `${nome} (Peso: ${peso})`;

  const buttonsDiv = document.createElement('div');
  const editBtn = document.createElement('button');
  editBtn.textContent = 'Editar';
  editBtn.onclick = () => {
    const novoNome = prompt('Editar matéria:', nome);
    const novoPeso = parseInt(prompt('Editar peso:', peso), 10);
    if (novoNome && novoPeso) {
      info.textContent = `${novoNome} (Peso: ${novoPeso})`;
      const idx = materias.findIndex(m => m.nome === nome);
      materias[idx] = { nome: novoNome, peso: novoPeso, ciclos: materias[idx].ciclos, revisoes: materias[idx].revisoes };
      updateTimerOptions();
      salvarDados();
    }
  };

  const delBtn = document.createElement('button');
  delBtn.textContent = 'Excluir';
  delBtn.onclick = () => {
    materiasList.removeChild(item);
    materias = materias.filter(m => m.nome !== nome);
    updateTimerOptions();
    salvarDados();
  };

  buttonsDiv.appendChild(editBtn);
  buttonsDiv.appendChild(delBtn);
  item.appendChild(info);
  item.appendChild(buttonsDiv);
  materiasList.appendChild(item);

  materias.push({ nome, peso, ciclos: 0, revisoes: [] });
  updateTimerOptions();
  document.getElementById('materiaInput').value = '';
  salvarDados();
});

/* ===== RESTANTE DO CÓDIGO (SEM ALTERAÇÃO) ===== */
function updateTimerOptions() {
  timerMateria.innerHTML = '<option value="">Selecionar matéria</option>';
  materias.forEach(m => {
    const option = document.createElement('option');
    option.value = m.nome;
    option.text = `${m.nome} (Peso: ${m.peso})`;
    timerMateria.appendChild(option);
  });
}

function escolherMateriaComHistorico() {
  const k = 2;
  const pesosAjustados = materias.map(m => m.peso * (1 + m.ciclos/k));
  const somaPesos = pesosAjustados.reduce((a,b)=>a+b,0);
  const rand = Math.random() * somaPesos;
  let acumulado = 0;
  for (let i=0;i<materias.length;i++){
    acumulado += pesosAjustados[i];
    if(rand<=acumulado){
      materias.forEach((m,j)=> { m.ciclos += (i===j ? 0 : 1); });
      materias[i].ciclos=0;
      return materias[i].nome;
    }
  }
  return null;
}

function updateDisplay(){
  let mins=String(Math.floor(remainingSeconds/60)).padStart(2,'0');
  let secs=String(remainingSeconds%60).padStart(2,'0');
  document.getElementById('timer').textContent=`${mins}:${secs}`;
}

function mostrarModal(){ revisaoModal.style.display='flex'; }
function esconderModal(){ revisaoModal.style.display='none'; }

function salvarRevisaoFunc(){
  if(!materiaAtual) return;
  const materiaObj = materias.find(m=>m.nome===materiaAtual);
  if(!materiaObj) return;

  const hoje = new Date();
  materiaObj.revisoes.push(hoje);

  if(marcarRevisao.checked){
    materiaObj.revisoes.push(
        new Date(hoje.getTime()+1*24*60*60*1000),
        new Date(hoje.getTime()+15*24*60*60*1000),
        new Date(hoje.getTime()+30*24*60*60*1000),
        new Date(hoje.getTime()+45*24*60*60*1000)
    );
  }

  const hist=document.createElement('div');
  hist.className='historico-item';
  hist.textContent=`${new Date().toLocaleTimeString()}: ${materiaObj.nome} - ${mensagemRevisao.value}`;
  historicoList.prepend(hist);

  mensagemRevisao.value='';
  marcarRevisao.checked=false;
  esconderModal();
  atualizarRevisoesHoje();
  salvarDados();
}
salvarRevisao.addEventListener('click', salvarRevisaoFunc);

function iniciarContagem(){
  clearInterval(interval);
  updateDisplay();
  interval=setInterval(()=>{
    if(remainingSeconds>0){
      remainingSeconds--;
      updateDisplay();
      salvarDados();
    } else {
      clearInterval(interval);
      mostrarModal();
      salvarDados();
    }
  },1000);
}

function iniciarTimer(){
  let minutes=parseInt(document.getElementById('minutes').value,10);
  totalSeconds=minutes*60;
  remainingSeconds=totalSeconds;
  materiaAtual=escolherMateriaComHistorico();
  if(materiaAtual){ timerMateria.value=materiaAtual; }

  endTime = new Date(Date.now() + totalSeconds*1000);
  iniciarContagem();
  salvarDados();
}

document.getElementById('startBtn').addEventListener('click',iniciarTimer);
document.getElementById('pauseBtn').addEventListener('click',()=>{ clearInterval(interval); mostrarModal(); salvarDados(); });
document.getElementById('resumeBtn').addEventListener('click',()=>{
  esconderModal();
  if(remainingSeconds>0){
    endTime = new Date(Date.now() + remainingSeconds*1000);
    iniciarContagem();
  }
  salvarDados();
});
document.getElementById('stopBtn').addEventListener('click',()=>{ clearInterval(interval); remainingSeconds=0; updateDisplay(); mostrarModal(); salvarDados(); });

function atualizarRevisoesHoje() {
  const hoje = new Date().toDateString();
  revisoesHojeList.innerHTML = '<h3>Revisões de hoje</h3>';
  materias.forEach(m => {
    const revisoesDoDia = m.revisoes.filter(d => new Date(d).toDateString() === hoje);
    revisoesDoDia.forEach(d => {
      const item = document.createElement('div');
      item.className = 'revisao-hoje-item';
      item.textContent = `${m.nome} - ${new Date(d).toLocaleTimeString()}`;
      revisoesHojeList.appendChild(item);
    });
  });
}

window.onload = () => {
  carregarDados();
  atualizarRevisoesHoje();
  updateDisplay();
};
</script>
</body>
</html>

------------------------------------------------------------------------------------------------------------
<!DOCTYPE html>
<html lang="pt-BR">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Timer com Histórico e Revisões - Drag & Drop</title>
<style>
  body { font-family: Arial, sans-serif; background-color: #f4f4f4; display:flex; flex-direction:column; justify-content:center; align-items:center; gap:20px; }
  .bloco { background:white; padding:15px; border-radius:10px; box-shadow:0 4px 8px rgba(0,0,0,0.1); width:350px; display:flex; flex-direction:column; gap:5px; cursor:move; }
  input[type="text"], select, input[type="number"], textarea { padding:10px; font-size:16px; border:1px solid #ccc; border-radius:5px; width:100%; box-sizing:border-box; }
  button { padding:5px 10px; background-color:#4CAF50; color:white; border:none; border-radius:5px; font-size:14px; cursor:pointer; transition: background-color 0.3s; }
  button:hover { background-color:#45a049; }
  .materia-item, .historico-item, .revisao-hoje-item { display:flex; flex-direction:column; justify-content:space-between; padding:5px 10px; border-bottom:1px solid #eee; }
  .materia-buttons button { margin-left:5px; padding:3px 8px; font-size:12px; }
  .selected { background-color:#d1e7dd; border-radius:5px; }
  .revisao-container { display:none; flex-direction:column; gap:5px; margin-top:10px; width:100%; }
  .timer-item { font-size:14px; font-weight:bold; margin-top:5px; }
  .timer-buttons { display:flex; gap:5px; margin-top:5px; }
  .dificuldade-container { display:flex; flex-direction:column; gap:5px; margin-top:5px; }
</style>
</head>
<body>

<div id="editor">

  <!-- BLOCO 1: ADICIONAR MATÉRIAS -->
  <div class="bloco" id="blocoAdicionar">
    <input type="text" id="materiaInput" placeholder="Digite a matéria" />
    <label for="peso">Peso:</label>
    <select id="peso">
      <option value="1">1</option>
      <option value="2">2</option>
      <option value="3">3</option>
      <option value="4">4</option>
      <option value="5">5</option>
    </select>
    <button id="addBtn">Adicionar</button>
    <div class="materias-list" id="materiasList"></div>
  </div>

  <!-- BLOCO 2: TIMER PRINCIPAL -->
  <div class="bloco" id="blocoTimer">
    <div class="time-input">
      <label for="minutes">Minutos:</label>
      <input type="number" id="minutes" min="10" step="10" value="10">
    </div>
    <div class="timer-container" style="display:flex; gap:10px; align-items:center;">
      <div class="timer" id="timer">00:00</div>
      <select id="timerMateria">
        <option value="">Selecionar matéria</option>
      </select>
    </div>
    <div class="controls" style="display:flex; gap:10px;">
      <button id="startBtn">Iniciar</button>
      <button id="pauseBtn">Pausar</button>
      <button id="resumeBtn">Continuar</button>
      <button id="stopBtn">Finalizar</button>
    </div>
  </div>

  <!-- BLOCO 3: MODAL DE REVISÃO -->
  <div class="bloco" id="blocoRevisaoModal">
    <div id="revisaoModal" class="revisao-container">
      <textarea id="mensagemRevisao" placeholder="Onde você parou..." rows="3"></textarea>
      <label><input type="checkbox" id="marcarRevisao"> Marcar revisão futura</label>
      <button id="salvarRevisao">Salvar</button>
    </div>
  </div>

  <!-- BLOCO 4: HISTÓRICO ORIGINAL -->
  <div class="bloco" id="blocoHistorico">
    <div class="historico-list" id="historicoList"><h3>Histórico de Estudo</h3></div>
  </div>

  <!-- BLOCO 5: REVISÕES DE HOJE -->
  <div class="bloco" id="blocoRevisoesHoje">
    <div class="revisoes-hoje-list" id="revisoesHojeList">
      <h3>Revisões de hoje</h3>
    </div>
  </div>

</div>

<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
<script>
  new Sortable(editor, {
    animation: 150,
    handle: '.bloco',
    ghostClass: 'sortable-ghost'
  });
</script>

<script>
const addBtn = document.getElementById('addBtn');
const materiasList = document.getElementById('materiasList');
const timerMateria = document.getElementById('timerMateria');
const historicoList = document.getElementById('historicoList');
const revisaoModal = document.getElementById('revisaoModal');
const mensagemRevisao = document.getElementById('mensagemRevisao');
const marcarRevisao = document.getElementById('marcarRevisao');
const salvarRevisao = document.getElementById('salvarRevisao');
const revisoesHojeList = document.getElementById('revisoesHojeList');

let materias = [];
let materiaAtual = null;
let totalSeconds=0;
let remainingSeconds=0;
let interval=null;
let endTime=null; 

/* ===== LOCALSTORAGE ===== */
function salvarDados() {
  const dados = { materias, materiaAtual, totalSeconds, remainingSeconds, endTime };
  localStorage.setItem("estudoData", JSON.stringify(dados));
}

function carregarDados() {
  const dadosStr = localStorage.getItem("estudoData");
  if (!dadosStr) return;
  const dados = JSON.parse(dadosStr);

  materias = dados.materias || [];
  materiaAtual = dados.materiaAtual || null;
  totalSeconds = dados.totalSeconds || 0;
  remainingSeconds = dados.remainingSeconds || 0;
  endTime = dados.endTime || null;

  reconstruirListaMaterias();
  updateTimerOptions();
  atualizarHistorico();
  atualizarRevisoesHoje();

  if(endTime){
    const diff = Math.floor((new Date(endTime).getTime() - Date.now()) / 1000);
    if(diff > 0){
      remainingSeconds = diff;
      iniciarContagem();
    } else {
      remainingSeconds = 0;
      updateDisplay();
      mostrarModal();
    }
  }
}

/* ===== RECONSTRUIR LISTA VISUAL DAS MATÉRIAS ===== */
function reconstruirListaMaterias(){
  materiasList.innerHTML = '';
  materias.forEach(m => {
    const item = document.createElement('div');
    item.className = 'materia-item';
    const info = document.createElement('span');
    info.textContent = `${m.nome} (Peso: ${m.peso})`;

    const buttonsDiv = document.createElement('div');
    const editBtn = document.createElement('button');
    editBtn.textContent = 'Editar';
    editBtn.onclick = () => {
      const novoNome = prompt('Editar matéria:', m.nome);
      const novoPeso = parseInt(prompt('Editar peso:', m.peso), 10);
      if(novoNome && novoPeso){
        info.textContent = `${novoNome} (Peso: ${novoPeso})`;
        const idx = materias.findIndex(mat => mat.nome === m.nome);
        materias[idx] = { nome: novoNome, peso: novoPeso, sessoes: materias[idx].sessoes || [] };
        updateTimerOptions();
        salvarDados();
      }
    };

    const delBtn = document.createElement('button');
    delBtn.textContent = 'Excluir';
    delBtn.onclick = () => {
      materiasList.removeChild(item);
      materias = materias.filter(mat => mat.nome !== m.nome);
      updateTimerOptions();
      salvarDados();
      atualizarHistorico();
      atualizarRevisoesHoje();
    };

    buttonsDiv.appendChild(editBtn);
    buttonsDiv.appendChild(delBtn);
    item.appendChild(info);
    item.appendChild(buttonsDiv);
    materiasList.appendChild(item);
  });
}

/* ===== ADICIONAR MATÉRIAS ===== */
addBtn.addEventListener('click', () => {
  const nome = document.getElementById('materiaInput').value.trim();
  const peso = parseInt(document.getElementById('peso').value, 10);
  if (!nome) return;

  const novaMateria = { nome, peso, sessoes: [] };
  materias.push(novaMateria);
  reconstruirListaMaterias();
  updateTimerOptions();
  document.getElementById('materiaInput').value = '';
  salvarDados();
});

/* ===== FUNÇÕES AUXILIARES ===== */
function updateTimerOptions() {
  timerMateria.innerHTML = '<option value="">Selecionar matéria</option>';
  materias.forEach(m => {
    const option = document.createElement('option');
    option.value = m.nome;
    option.text = `${m.nome} (Peso: ${m.peso})`;
    timerMateria.appendChild(option);
  });
}

function updateDisplay(){
  let mins=String(Math.floor(remainingSeconds/60)).padStart(2,'0');
  let secs=String(remainingSeconds%60).padStart(2,'0');
  document.getElementById('timer').textContent=`${mins}:${secs}`;
}

function mostrarModal(){ revisaoModal.style.display='flex'; }
function esconderModal(){ revisaoModal.style.display='none'; }

/* ===== SALVAR REVISÃO ===== */
function salvarRevisaoFunc(){
  if(!materiaAtual) return;
  const materiaObj = materias.find(m=>m.nome===materiaAtual);
  if(!materiaObj) return;

  const agora = new Date();
  const sessao = {
    nomeMateria: materiaObj.nome,
    horaTermino: new Date(Date.now() - (remainingSeconds*1000)).toLocaleTimeString(),
    anotacao: mensagemRevisao.value.trim(),
    datasRevisao: []
  };

  // Datas de revisão: 1,15,30,45 dias
  const dias = [0,1,15,30,45];
  dias.forEach(d => {
    sessao.datasRevisao.push(new Date(agora.getTime() + d*24*60*60*1000).toLocaleDateString());
  });

  if(!materiaObj.sessoes) materiaObj.sessoes=[];
  materiaObj.sessoes.push(sessao);

  atualizarHistorico();
  atualizarRevisoesHoje();
  mensagemRevisao.value='';
  marcarRevisao.checked=false;
  esconderModal();
  salvarDados();
}

salvarRevisao.addEventListener('click', salvarRevisaoFunc);

/* ===== HISTÓRICO ===== */
function atualizarHistorico(){
  historicoList.innerHTML = '<h3>Histórico de Estudo</h3>';
  materias.forEach(m => {
    if(m.sessoes){
      m.sessoes.forEach(s=>{
        const div = document.createElement('div');
        div.className = 'historico-item';
        div.innerHTML=`
          <strong>Matéria:</strong> ${s.nomeMateria} <br>
          <strong>Horário de término:</strong> ${s.horaTermino} <br>
          <strong>Anotação:</strong> ${s.anotacao} <br>
          <strong>Datas de revisão:</strong> ${s.datasRevisao.join(', ')}
        `;
        historicoList.prepend(div);
      });
    }
  });
}

/* ===== REVISÕES DE HOJE ===== */
function atualizarRevisoesHoje() {
  const hoje = new Date().toLocaleDateString();
  revisoesHojeList.innerHTML = '<h3>Revisões de hoje</h3>';
  materias.forEach(m => {
    if(m.sessoes){
      m.sessoes.forEach(s=>{
        if(s.datasRevisao.includes(hoje)){
          const item = document.createElement('div');
          item.className='revisao-hoje-item';
          item.innerHTML=`
            <strong>Matéria:</strong> ${s.nomeMateria} <br>
            <strong>Horário de término:</strong> ${s.horaTermino} <br>
            <strong>Anotação:</strong> ${s.anotacao}
          `;
          revisoesHojeList.appendChild(item);
        }
      });
    }
  });
}

/* ===== TIMER ===== */
function iniciarContagem(){
  clearInterval(interval);
  updateDisplay();
  interval=setInterval(()=>{
    if(remainingSeconds>0){
      remainingSeconds--;
      updateDisplay();
      salvarDados();
    } else {
      clearInterval(interval);
      mostrarModal();
      salvarDados();
    }
  },1000);
}

function escolherMateriaComHistorico() {
  if(materias.length===0) return null;
  const k=2;
  const pesosAjustados=materias.map(m=>m.peso*(1+(m.sessoes?m.sessoes.length:0)/k));
  const somaPesos = pesosAjustados.reduce((a,b)=>a+b,0);
  const rand = Math.random() * somaPesos;
  let acumulado =0;
  for(let i=0;i<materias.length;i++){
    acumulado+=pesosAjustados[i];
    if(rand<=acumulado){
      return materias[i].nome;
    }
  }
  return materias[0].nome;
}

function iniciarTimer(){
  let minutes=parseInt(document.getElementById('minutes').value,10);
  totalSeconds=minutes*60;
  remainingSeconds=totalSeconds;
  materiaAtual=escolherMateriaComHistorico();
  if(materiaAtual) timerMateria.value=materiaAtual;
  endTime = new Date(Date.now() + totalSeconds*1000);
  iniciarContagem();
  salvarDados();
}

document.getElementById('startBtn').addEventListener('click',iniciarTimer);
document.getElementById('pauseBtn').addEventListener('click',()=>{ clearInterval(interval); mostrarModal(); salvarDados(); });
document.getElementById('resumeBtn').addEventListener('click',()=>{
  esconderModal();
  if(remainingSeconds>0){
    endTime = new Date(Date.now() + remainingSeconds*1000);
    iniciarContagem();
  }
  salvarDados();
});
document.getElementById('stopBtn').addEventListener('click',()=>{ clearInterval(interval); remainingSeconds=0; updateDisplay(); mostrarModal(); salvarDados(); });

window.onload = () => {
  carregarDados();
  updateDisplay();
};
</script>
</body>
</html>

------------------------------------------------------------------------------------------------------------
<!DOCTYPE html>
<html lang="pt-BR">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Timer com Histórico e Revisões - Drag & Drop</title>
<style>
  body { font-family: Arial, sans-serif; background-color: #f4f4f4; display:flex; flex-direction:column; justify-content:center; align-items:center; gap:20px; }
  .bloco { background:white; padding:15px; border-radius:10px; box-shadow:0 4px 8px rgba(0,0,0,0.1); width:350px; display:flex; flex-direction:column; gap:5px; cursor:move; }
  input[type="text"], select, input[type="number"], textarea { padding:10px; font-size:16px; border:1px solid #ccc; border-radius:5px; width:100%; box-sizing:border-box; }
  button { padding:5px 10px; background-color:#4CAF50; color:white; border:none; border-radius:5px; font-size:14px; cursor:pointer; transition: background-color 0.3s; }
  button:hover { background-color:#45a049; }
  .materia-item, .historico-item, .revisao-hoje-item { display:flex; flex-direction:column; justify-content:space-between; padding:5px 10px; border-bottom:1px solid #eee; }
  .materia-buttons button { margin-left:5px; padding:3px 8px; font-size:12px; }
  .selected { background-color:#d1e7dd; border-radius:5px; }
  .revisao-container { display:none; flex-direction:column; gap:5px; margin-top:10px; width:100%; }
  .timer-item { font-size:14px; font-weight:bold; margin-top:5px; }
  .timer-buttons { display:flex; gap:5px; margin-top:5px; }
  .dificuldade-container { display:flex; flex-direction:column; gap:5px; margin-top:5px; }
</style>
</head>
<body>

<div id="editor">

  <!-- BLOCO 1: ADICIONAR MATÉRIAS -->
  <div class="bloco" id="blocoAdicionar">
    <input type="text" id="materiaInput" placeholder="Digite a matéria" />
    <label for="peso">Peso:</label>
    <select id="peso">
      <option value="1">1</option>
      <option value="2">2</option>
      <option value="3">3</option>
      <option value="4">4</option>
      <option value="5">5</option>
    </select>
    <button id="addBtn">Adicionar</button>
    <div class="materias-list" id="materiasList"></div>
  </div>

  <!-- BLOCO 2: TIMER PRINCIPAL -->
  <div class="bloco" id="blocoTimer">
    <div class="time-input">
      <label for="minutes">Minutos:</label>
      <input type="number" id="minutes" min="10" step="10" value="10">
    </div>
    <div class="timer-container" style="display:flex; gap:10px; align-items:center;">
      <div class="timer" id="timer">00:00</div>
      <select id="timerMateria">
        <option value="">Selecionar matéria</option>
      </select>
    </div>
    <div class="controls" style="display:flex; gap:10px;">
      <button id="startBtn">Iniciar</button>
      <button id="pauseBtn">Pausar</button>
      <button id="resumeBtn">Continuar</button>
      <button id="stopBtn">Finalizar</button>
    </div>
  </div>

  <!-- BLOCO 3: MODAL DE REVISÃO -->
  <div class="bloco" id="blocoRevisaoModal">
    <div id="revisaoModal" class="revisao-container">
      <textarea id="mensagemRevisao" placeholder="Onde você parou..." rows="3"></textarea>
      <label><input type="checkbox" id="marcarRevisao"> Marcar revisão futura</label>
      <button id="salvarRevisao">Salvar</button>
    </div>
  </div>

  <!-- BLOCO 4: HISTÓRICO ORIGINAL -->
  <div class="bloco" id="blocoHistorico"> 
    <h3>Histórico de Estudo</h3>
    <div class="historico-list" id="historicoList"></div>
  </div>

  <!-- BLOCO 5: REVISÕES DE HOJE -->
  <div class="bloco" id="blocoRevisoesHoje">
    <h3>Revisões de hoje</h3>
    <div class="revisoes-hoje-list" id="revisoesHojeList"></div>
  </div>

</div>

<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
<script>
  new Sortable(editor, {
    animation: 150,
    handle: '.bloco',
    ghostClass: 'sortable-ghost'
  });
</script>

<script>
const addBtn = document.getElementById('addBtn');
const materiasList = document.getElementById('materiasList');
const timerMateria = document.getElementById('timerMateria');
const historicoList = document.getElementById('historicoList');
const revisaoModal = document.getElementById('revisaoModal');
const mensagemRevisao = document.getElementById('mensagemRevisao');
const marcarRevisao = document.getElementById('marcarRevisao');
const salvarRevisao = document.getElementById('salvarRevisao');
const revisoesHojeList = document.getElementById('revisoesHojeList');

let materias = [];
let materiaAtual = null;
let totalSeconds=0;
let remainingSeconds=0;
let interval=null;
let endTime=null; 

/* ===== LOCALSTORAGE ===== */
function salvarDados() {
  const dados = { materias, materiaAtual, totalSeconds, remainingSeconds, endTime };
  localStorage.setItem("estudoData", JSON.stringify(dados));
}

function carregarDados() {
  const dadosStr = localStorage.getItem("estudoData");
  if (!dadosStr) return;
  const dados = JSON.parse(dadosStr);

  materias = dados.materias || [];
  materiaAtual = dados.materiaAtual || null;
  totalSeconds = dados.totalSeconds || 0;
  remainingSeconds = dados.remainingSeconds || 0;
  endTime = dados.endTime || null;

  reconstruirListaMaterias();
  updateTimerOptions();
  atualizarHistorico();
  atualizarRevisoesHoje();

  if(endTime){
    const diff = Math.floor((new Date(endTime).getTime() - Date.now()) / 1000);
    if(diff > 0){
      remainingSeconds = diff;
      iniciarContagem();
    } else {
      remainingSeconds = 0;
      updateDisplay();
      mostrarModal();
    }
  }
}

/* ===== RECONSTRUIR LISTA VISUAL DAS MATÉRIAS ===== */
function reconstruirListaMaterias(){
  materiasList.innerHTML = '';
  materias.forEach(m => {
    const item = document.createElement('div');
    item.className = 'materia-item';
    const info = document.createElement('span');
    info.textContent = `${m.nome} (Peso: ${m.peso})`;

    const buttonsDiv = document.createElement('div');
    const editBtn = document.createElement('button');
    editBtn.textContent = 'Editar';
    editBtn.onclick = () => {
      const novoNome = prompt('Editar matéria:', m.nome);
      const novoPeso = parseInt(prompt('Editar peso:', m.peso), 10);
      if(novoNome && novoPeso){
        info.textContent = `${novoNome} (Peso: ${novoPeso})`;
        const idx = materias.findIndex(mat => mat.nome === m.nome);
        materias[idx] = { nome: novoNome, peso: novoPeso, sessoes: materias[idx].sessoes || [] };
        updateTimerOptions();
        salvarDados();
      }
    };

    const delBtn = document.createElement('button');
    delBtn.textContent = 'Excluir';
    delBtn.onclick = () => {
      materias = materias.filter(mat => mat.nome !== m.nome);
      reconstruirListaMaterias();
      updateTimerOptions();
      atualizarHistorico();
      atualizarRevisoesHoje();
      salvarDados();
    };

    buttonsDiv.appendChild(editBtn);
    buttonsDiv.appendChild(delBtn);
    item.appendChild(info);
    item.appendChild(buttonsDiv);
    materiasList.appendChild(item);
  });
}

/* ===== ADICIONAR MATÉRIAS ===== */
addBtn.addEventListener('click', () => {
  const nome = document.getElementById('materiaInput').value.trim();
  const peso = parseInt(document.getElementById('peso').value, 10);
  if (!nome) return;

  const novaMateria = { nome, peso, sessoes: [] };
  materias.push(novaMateria);
  reconstruirListaMaterias();
  updateTimerOptions();
  document.getElementById('materiaInput').value = '';
  salvarDados();
});

/* ===== FUNÇÕES AUXILIARES ===== */
function updateTimerOptions() {
  timerMateria.innerHTML = '<option value="">Selecionar matéria</option>';
  materias.forEach(m => {
    const option = document.createElement('option');
    option.value = m.nome;
    option.text = `${m.nome} (Peso: ${m.peso})`;
    timerMateria.appendChild(option);
  });
}

function updateDisplay(){
  let mins=String(Math.floor(remainingSeconds/60)).padStart(2,'0');
  let secs=String(remainingSeconds%60).padStart(2,'0');
  document.getElementById('timer').textContent=`${mins}:${secs}`;
}

function mostrarModal(){ revisaoModal.style.display='flex'; }
function esconderModal(){ revisaoModal.style.display='none'; }

/* ===== SALVAR REVISÃO ===== */
function salvarRevisaoFunc(){
  if(!materiaAtual) return;
  const materiaObj = materias.find(m=>m.nome===materiaAtual);
  if(!materiaObj) return;

  const agora = new Date();
  const sessao = {
    nomeMateria: materiaObj.nome,
    horaTermino: new Date(Date.now() - (remainingSeconds*1000)).toLocaleTimeString(),
    anotacao: mensagemRevisao.value.trim(),
    datasRevisao: []
  };

  // Datas de revisão: 0,1,15,30,45 dias
  const dias = [0,1,15,30,45];
  dias.forEach(d => {
    sessao.datasRevisao.push(new Date(agora.getTime() + d*24*60*60*1000).toLocaleDateString());
  });

  if(!materiaObj.sessoes) materiaObj.sessoes=[];
  materiaObj.sessoes.push(sessao);

  atualizarHistorico();
  atualizarRevisoesHoje();
  mensagemRevisao.value='';
  marcarRevisao.checked=false;
  esconderModal();
  salvarDados();
}

salvarRevisao.addEventListener('click', salvarRevisaoFunc);

/* ===== HISTÓRICO ===== */
function atualizarHistorico(){
  historicoList.innerHTML = '';
  materias.forEach(m => {
    if(m.sessoes){
      m.sessoes.forEach(s=>{
        const div = document.createElement('div');
        div.className = 'historico-item';
        div.innerHTML=`
          <strong>Matéria:</strong> ${s.nomeMateria} <br>
          <strong>Horário de término:</strong> ${s.horaTermino} <br>
          <strong>Anotação:</strong> ${s.anotacao} <br>
          <strong>Datas de revisão:</strong> ${s.datasRevisao.join(', ')}
        `;
        historicoList.prepend(div);
      });
    }
  });
}

/* ===== REVISÕES DE HOJE COM TIMER INDIVIDUAL ===== */
function atualizarRevisoesHoje() {
  const hoje = new Date().toLocaleDateString();
  revisoesHojeList.innerHTML = '';
  materias.forEach(m => {
    if(m.sessoes){
      m.sessoes.forEach(s=>{
        if(s.datasRevisao.includes(hoje)){
          const item = document.createElement('div');
          item.className='revisao-hoje-item';

          // ID único para o timer
          const timerId = 'timer_' + Math.random().toString(36).substr(2,9);

          item.innerHTML=`
            <strong>Matéria:</strong> ${s.nomeMateria} <br>
            <strong>Horário de término:</strong> ${s.horaTermino} <br>
            <strong>Anotação:</strong> ${s.anotacao} <br>
            <strong>Data da revisão:</strong> ${hoje} <br>
            <div class="timer-item" id="${timerId}">00:00</div>
            <div class="timer-controls">
              <input type="number" class="timer-minutos" min="1" value="10" style="width:60px;">
              <button class="start-item-btn">Iniciar</button>
              <button class="stop-item-btn">Finalizar</button>
            </div>
          `;
          revisoesHojeList.appendChild(item);

          // Timer individual
          let itemInterval = null;
          let remainingItemSeconds = 0;

          const display = document.getElementById(timerId);
          const startBtn = item.querySelector('.start-item-btn');
          const stopBtn = item.querySelector('.stop-item-btn');
          const inputMin = item.querySelector('.timer-minutos');

          function updateItemDisplay() {
            let mins = String(Math.floor(remainingItemSeconds/60)).padStart(2,'0');
            let secs = String(remainingItemSeconds%60).padStart(2,'0');
            display.textContent = `${mins}:${secs}`;
          }

          startBtn.addEventListener('click',()=>{
            remainingItemSeconds = parseInt(inputMin.value,10)*60;
            updateItemDisplay();
            clearInterval(itemInterval);
            itemInterval = setInterval(()=>{
              if(remainingItemSeconds>0){
                remainingItemSeconds--;
                updateItemDisplay();
              } else {
                clearInterval(itemInterval);
                alert(`Timer da matéria "${s.nomeMateria}" finalizado!`);
              }
            },1000);
          });

          stopBtn.addEventListener('click',()=>{
            clearInterval(itemInterval);
            remainingItemSeconds=0;
            updateItemDisplay();
          });
        }
      });
    }
  });
}

/* ===== TIMER PRINCIPAL ===== */
function iniciarContagem(){
  clearInterval(interval);
  updateDisplay();
  interval=setInterval(()=>{
    if(remainingSeconds>0){
      remainingSeconds--;
      updateDisplay();
      salvarDados();
    } else {
      clearInterval(interval);
      mostrarModal();
      salvarDados();
    }
  },1000);
}

function escolherMateriaComHistorico() {
  if(materias.length===0) return null;
  const k=2;
  const pesosAjustados=materias.map(m=>m.peso*(1+(m.sessoes?m.sessoes.length:0)/k));
  const somaPesos = pesosAjustados.reduce((a,b)=>a+b,0);
  const rand = Math.random() * somaPesos;
  let acumulado =0;
  for(let i=0;i<materias.length;i++){
    acumulado+=pesosAjustados[i];
    if(rand<=acumulado){
      return materias[i].nome;
    }
  }
  return materias[0].nome;
}

function iniciarTimer(){
  let minutes=parseInt(document.getElementById('minutes').value,10);
  totalSeconds=minutes*60;
  remainingSeconds=totalSeconds;
  materiaAtual=escolherMateriaComHistorico();
  if(materiaAtual) timerMateria.value=materiaAtual;
  endTime = new Date(Date.now() + totalSeconds*1000);
  iniciarContagem();
  salvarDados();
}

document.getElementById('startBtn').addEventListener('click',iniciarTimer);
document.getElementById('pauseBtn').addEventListener('click',()=>{ clearInterval(interval); mostrarModal(); salvarDados(); });
document.getElementById('resumeBtn').addEventListener('click',()=>{
  esconderModal();
  if(remainingSeconds>0){
    endTime = new Date(Date.now() + remainingSeconds*1000);
    iniciarContagem();
  }
  salvarDados();
});
document.getElementById('stopBtn').addEventListener('click',()=>{ clearInterval(interval); remainingSeconds=0; updateDisplay(); mostrarModal(); salvarDados(); });

window.onload = () => {
  carregarDados();
  updateDisplay();
};
</script>
</body>
</html>


-----------------------------------------------------------------------------------------

<!DOCTYPE html>
<html lang="pt-BR">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Timer com Histórico e Revisões - Drag & Drop</title>
<style>
  body { font-family: Arial, sans-serif; background-color: #f4f4f4; display:flex; flex-direction:column; justify-content:center; align-items:center; gap:20px; }
  .bloco { background:white; padding:15px; border-radius:10px; box-shadow:0 4px 8px rgba(0,0,0,0.1); width:350px; display:flex; flex-direction:column; gap:5px; cursor:move; }
  input[type="text"], select, input[type="number"], textarea { padding:10px; font-size:16px; border:1px solid #ccc; border-radius:5px; width:100%; box-sizing:border-box; }
  button { padding:5px 10px; background-color:#4CAF50; color:white; border:none; border-radius:5px; font-size:14px; cursor:pointer; transition: background-color 0.3s; }
  button:hover { background-color:#45a049; }
  .materia-item, .historico-item, .revisao-hoje-item { display:flex; flex-direction:column; justify-content:space-between; padding:5px 10px; border-bottom:1px solid #eee; }
  .materia-buttons button { margin-left:5px; padding:3px 8px; font-size:12px; }
  .selected { background-color:#d1e7dd; border-radius:5px; }
  .revisao-container { display:none; flex-direction:column; gap:5px; margin-top:10px; width:100%; }
  .timer-item { font-size:14px; font-weight:bold; margin-top:5px; }
  .timer-buttons { display:flex; gap:5px; margin-top:5px; }
  .dificuldade-container { display:flex; flex-direction:column; gap:5px; margin-top:5px; }
</style>
</head>
<body>

<div id="editor">

  <!-- BLOCO 1: ADICIONAR MATÉRIAS -->
  <div class="bloco" id="blocoAdicionar">
    <input type="text" id="materiaInput" placeholder="Digite a matéria" />
    <label for="peso">Peso:</label>
    <select id="peso">
      <option value="1">1</option>
      <option value="2">2</option>
      <option value="3">3</option>
      <option value="4">4</option>
      <option value="5">5</option>
    </select>
    <button id="addBtn">Adicionar</button>
    <div class="materias-list" id="materiasList"></div>
  </div>

  <!-- BLOCO 2: TIMER PRINCIPAL -->
  <div class="bloco" id="blocoTimer">
    <div class="time-input">
      <label for="minutes">Minutos:</label>
      <input type="number" id="minutes" min="10" step="10" value="10">
    </div>
    <div class="timer-container" style="display:flex; gap:10px; align-items:center;">
      <div class="timer" id="timer">00:00</div>
      <select id="timerMateria">
        <option value="">Selecionar matéria</option>
      </select>
    </div>
    <div class="controls" style="display:flex; gap:10px;">
      <button id="startBtn">Iniciar</button>
      <button id="pauseBtn">Pausar</button>
      <button id="resumeBtn">Continuar</button>
      <button id="stopBtn">Finalizar</button>
    </div>
  </div>

  <!-- BLOCO 3: MODAL DE REVISÃO -->
  <div class="bloco" id="blocoRevisaoModal">
    <div id="revisaoModal" class="revisao-container">
      <textarea id="mensagemRevisao" placeholder="Onde você parou..." rows="3"></textarea>
      <label><input type="checkbox" id="marcarRevisao"> Marcar revisão futura</label>
      <button id="salvarRevisao">Salvar</button>
    </div>
  </div>

  <!-- BLOCO 4: HISTÓRICO ORIGINAL -->
  <div class="bloco" id="blocoHistorico"> 
    <h3>Histórico de Estudo</h3>
    <div class="historico-list" id="historicoList"></div>
  </div>

  <!-- BLOCO 5: REVISÕES DE HOJE -->
  <div class="bloco" id="blocoRevisoesHoje">
    <h3>Revisões de hoje</h3>
    <div class="revisoes-hoje-list" id="revisoesHojeList"></div>
  </div>

</div>

<!-- BLOCO 6: HISTÓRICO DAS REVISÕES -->
<div class="bloco" id="blocoHistoricoRevisao">
  <h3>Histórico da Revisão</h3>
  <div class="historico-revisao-list" id="historicoRevisaoList"></div>
</div>
<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
<script>
  new Sortable(editor, {
    animation: 150,
    handle: '.bloco',
    ghostClass: 'sortable-ghost'
  });
</script>

<script>
const addBtn = document.getElementById('addBtn');
const materiasList = document.getElementById('materiasList');
const timerMateria = document.getElementById('timerMateria');
const historicoList = document.getElementById('historicoList');
const revisaoModal = document.getElementById('revisaoModal');
const mensagemRevisao = document.getElementById('mensagemRevisao');
const marcarRevisao = document.getElementById('marcarRevisao');
const salvarRevisao = document.getElementById('salvarRevisao');
const revisoesHojeList = document.getElementById('revisoesHojeList');
const historicoRevisaoList = document.getElementById('historicoRevisaoList');


let materias = [];
let materiaAtual = null;
let totalSeconds=0;
let remainingSeconds=0;
let interval=null;
let endTime=null; 

/* ===== LOCALSTORAGE ===== */
function salvarDados() {
  const dados = { materias, materiaAtual, totalSeconds, remainingSeconds, endTime };
  localStorage.setItem("estudoData", JSON.stringify(dados));
}

function carregarDados() {
  const dadosStr = localStorage.getItem("estudoData");
  if (!dadosStr) return;
  const dados = JSON.parse(dadosStr);

  materias = dados.materias || [];
  materiaAtual = dados.materiaAtual || null;
  totalSeconds = dados.totalSeconds || 0;
  remainingSeconds = dados.remainingSeconds || 0;
  endTime = dados.endTime || null;

  reconstruirListaMaterias();
  updateTimerOptions();
  atualizarHistorico();
  atualizarRevisoesHoje();

  if(endTime){
    const diff = Math.floor((new Date(endTime).getTime() - Date.now()) / 1000);
    if(diff > 0){
      remainingSeconds = diff;
      iniciarContagem();
    } else {
      remainingSeconds = 0;
      updateDisplay();
      mostrarModal();
    }
  }
}

/* ===== RECONSTRUIR LISTA VISUAL DAS MATÉRIAS ===== */
function reconstruirListaMaterias(){
  materiasList.innerHTML = '';
  materias.forEach(m => {
    const item = document.createElement('div');
    item.className = 'materia-item';
    const info = document.createElement('span');
    info.textContent = `${m.nome} (Peso: ${m.peso})`;

    const buttonsDiv = document.createElement('div');
    const editBtn = document.createElement('button');
    editBtn.textContent = 'Editar';
    editBtn.onclick = () => {
      const novoNome = prompt('Editar matéria:', m.nome);
      const novoPeso = parseInt(prompt('Editar peso:', m.peso), 10);
      if(novoNome && novoPeso){
        info.textContent = `${novoNome} (Peso: ${novoPeso})`;
        const idx = materias.findIndex(mat => mat.nome === m.nome);
        materias[idx] = { nome: novoNome, peso: novoPeso, sessoes: materias[idx].sessoes || [] };
        updateTimerOptions();
        salvarDados();
      }
    };

    const delBtn = document.createElement('button');
    delBtn.textContent = 'Excluir';
    delBtn.onclick = () => {
      materias = materias.filter(mat => mat.nome !== m.nome);
      reconstruirListaMaterias();
      updateTimerOptions();
      atualizarHistorico();
      atualizarRevisoesHoje();
      salvarDados();
    };

    buttonsDiv.appendChild(editBtn);
    buttonsDiv.appendChild(delBtn);
    item.appendChild(info);
    item.appendChild(buttonsDiv);
    materiasList.appendChild(item);
  });
}

/* ===== ADICIONAR MATÉRIAS ===== */
addBtn.addEventListener('click', () => {
  const nome = document.getElementById('materiaInput').value.trim();
  const peso = parseInt(document.getElementById('peso').value, 10);
  if (!nome) return;

  const novaMateria = { nome, peso, sessoes: [] };
  materias.push(novaMateria);
  reconstruirListaMaterias();
  updateTimerOptions();
  document.getElementById('materiaInput').value = '';
  salvarDados();
});

/* ===== FUNÇÕES AUXILIARES ===== */
function updateTimerOptions() {
  timerMateria.innerHTML = '<option value="">Selecionar matéria</option>';
  materias.forEach(m => {
    const option = document.createElement('option');
    option.value = m.nome;
    option.text = `${m.nome} (Peso: ${m.peso})`;
    timerMateria.appendChild(option);
  });
}

function updateDisplay(){
  let mins=String(Math.floor(remainingSeconds/60)).padStart(2,'0');
  let secs=String(remainingSeconds%60).padStart(2,'0');
  document.getElementById('timer').textContent=`${mins}:${secs}`;
}

function mostrarModal(){ revisaoModal.style.display='flex'; }
function esconderModal(){ revisaoModal.style.display='none'; }

/* ===== SALVAR REVISÃO ===== */
function salvarRevisaoFunc(){
  if(!materiaAtual) return;
  const materiaObj = materias.find(m=>m.nome===materiaAtual);
  if(!materiaObj) return;

  const agora = new Date();
  const sessao = {
    nomeMateria: materiaObj.nome,
    horaTermino: new Date(Date.now() - (remainingSeconds*1000)).toLocaleTimeString(),
    anotacao: mensagemRevisao.value.trim(),
    datasRevisao: []
  };

  // Datas de revisão: 0,1,15,30,45 dias
  const dias = [0,1,15,30,45];
  dias.forEach(d => {
    sessao.datasRevisao.push(new Date(agora.getTime() + d*24*60*60*1000).toLocaleDateString());
  });

  if(!materiaObj.sessoes) materiaObj.sessoes=[];
  materiaObj.sessoes.push(sessao);

  atualizarHistorico();
  atualizarRevisoesHoje();
  mensagemRevisao.value='';
  marcarRevisao.checked=false;
  esconderModal();
  salvarDados();
}

salvarRevisao.addEventListener('click', salvarRevisaoFunc);

/* ===== HISTÓRICO ===== */
function atualizarHistorico(){
  historicoList.innerHTML = '';
  materias.forEach(m => {
    if(m.sessoes){
      m.sessoes.forEach(s=>{
        const div = document.createElement('div');
        div.className = 'historico-item';
        div.innerHTML=`
          <strong>Matéria:</strong> ${s.nomeMateria} <br>
          <strong>Horário de término:</strong> ${s.horaTermino} <br>
          <strong>Anotação:</strong> ${s.anotacao} <br>
          <strong>Datas de revisão:</strong> ${s.datasRevisao.join(', ')}
        `;
        historicoList.prepend(div);
      });
    }
  });
}
/* ===== HISTÓRICO DA REVISÃO (NOVO) ===== */
function atualizarHistoricoRevisao(){
  historicoRevisaoList.innerHTML = '';
  const historicoRevisoes = JSON.parse(localStorage.getItem("historicoRevisoes") || "[]");

  historicoRevisoes.forEach(r=>{
    const div = document.createElement('div');
    div.className = 'historico-item';
    div.innerHTML = `
      <strong>Matéria:</strong> ${r.materia} <br>
      <strong>Horário:</strong> ${r.horario} <br>
      <strong>Anotação:</strong> ${r.anotacao || '-'} <br>
      <strong>Data:</strong> ${r.data} <br>
      <strong>Dificuldade:</strong> ${r.dificuldade} <br>
      <strong>Acertos:</strong> ${r.acertos}
    `;
    historicoRevisaoList.prepend(div);
  });
}

/* ===== REVISÕES DE HOJE COM TIMER + AVALIAÇÃO ===== */
function atualizarRevisoesHoje() {
  const hoje = new Date().toLocaleDateString(); // mantendo o mesmo formato que você usa hoje
  revisoesHojeList.innerHTML = '';

  materias.forEach(m => {
    if (m.sessoes) {
      m.sessoes.forEach(s => {
        if (Array.isArray(s.datasRevisao) && s.datasRevisao.includes(hoje)) {
          const item = document.createElement('div');
          item.className = 'revisao-hoje-item';

          // ID único do timer
          const timerId = 'timer_' + Math.random().toString(36).substr(2,9);

          item.innerHTML = `
            <strong>Matéria:</strong> ${s.nomeMateria} <br>
            <strong>Horário de término:</strong> ${s.horaTermino} <br>
            <strong>Anotação:</strong> ${s.anotacao || '-'} <br>
            <strong>Data da revisão:</strong> ${hoje} <br>
            <div class="timer-item" id="${timerId}">00:00</div>
            <div class="timer-controls">
              <input type="number" class="timer-minutos" min="1" value="10" style="width:60px;">
              <button class="start-item-btn">Iniciar</button>
              <button class="stop-item-btn">Finalizar</button>
            </div>
            <div class="dificuldade-container" style="display:none;">
              <label>Dificuldade:
                <select class="select-dificuldade">
                  ${Array.from({length:10}, (_,i)=>`<option value="${i+1}">${i+1}</option>`).join('')}
                </select>
              </label>
              <label>Acertos:
                <select class="select-acertos">
                  ${Array.from({length:30}, (_,i)=>`<option value="${i+1}">${i+1}</option>`).join('')}
                </select>
              </label>
              <button class="salvar-revisao-btn">Salvar</button>
            </div>
          `;

          revisoesHojeList.appendChild(item);

          // ----- Timer individual -----
          let itemInterval = null;
          let remainingItemSeconds = 0;

          const display = document.getElementById(timerId);
          const startBtn = item.querySelector('.start-item-btn');
          const stopBtn = item.querySelector('.stop-item-btn');
          const inputMin = item.querySelector('.timer-minutos');

          function updateItemDisplay() {
            let mins = String(Math.floor(remainingItemSeconds/60)).padStart(2,'0');
            let secs = String(remainingItemSeconds%60).padStart(2,'0');
            display.textContent = `${mins}:${secs}`;
          }

          startBtn.addEventListener('click', ()=>{
            remainingItemSeconds = parseInt(inputMin.value,10) * 60;
            updateItemDisplay();
            clearInterval(itemInterval);
            itemInterval = setInterval(()=>{
              if (remainingItemSeconds > 0) {
                remainingItemSeconds--;
                updateItemDisplay();
              } else {
                clearInterval(itemInterval);
                alert(`Timer da matéria "${s.nomeMateria}" finalizado!`);
              }
            }, 1000);
          });

          // ----- “Finalizar” agora mostra os dropdowns -----
          const avaliacaoDiv = item.querySelector('.dificuldade-container');
          const salvarBtn = item.querySelector('.salvar-revisao-btn');

          stopBtn.addEventListener('click', ()=>{
            clearInterval(itemInterval);
            remainingItemSeconds = 0;
            updateItemDisplay();
            avaliacaoDiv.style.display = 'flex';
          });

          // ----- Salvar no Histórico da Revisão -----
          salvarBtn.addEventListener('click', ()=>{
            const dificuldade = item.querySelector('.select-dificuldade').value;
            const acertos = item.querySelector('.select-acertos').value;

            const revisaoData = {
              materia: s.nomeMateria,
              horario: s.horaTermino,
              anotacao: s.anotacao || '',
              data: hoje,
              dificuldade,
              acertos
            };

            // salva/atualiza no localStorage
            const historicoRevisoes = JSON.parse(localStorage.getItem('historicoRevisoes') || '[]');
            historicoRevisoes.push(revisaoData);
            localStorage.setItem('historicoRevisoes', JSON.stringify(historicoRevisoes));

            // remove a data 'hoje' desta sessão para ela não reaparecer
            s.datasRevisao = (s.datasRevisao || []).filter(d => d !== hoje);
            salvarDados();

            // atualiza a UI
            atualizarHistoricoRevisao();
            item.remove();
          });
        }
      });
    }
  });
}

/* ===== TIMER PRINCIPAL ===== */
function iniciarContagem(){
  clearInterval(interval);
  updateDisplay();
  interval=setInterval(()=>{
    if(remainingSeconds>0){
      remainingSeconds--;
      updateDisplay();
      salvarDados();
    } else {
      clearInterval(interval);
      mostrarModal();
      salvarDados();
    }
  },1000);
}

function escolherMateriaComHistorico() {
  if(materias.length===0) return null;
  const k=2;
  const pesosAjustados=materias.map(m=>m.peso*(1+(m.sessoes?m.sessoes.length:0)/k));
  const somaPesos = pesosAjustados.reduce((a,b)=>a+b,0);
  const rand = Math.random() * somaPesos;
  let acumulado =0;
  for(let i=0;i<materias.length;i++){
    acumulado+=pesosAjustados[i];
    if(rand<=acumulado){
      return materias[i].nome;
    }
  }
  return materias[0].nome;
}

function iniciarTimer(){
  let minutes=parseInt(document.getElementById('minutes').value,10);
  totalSeconds=minutes*60;
  remainingSeconds=totalSeconds;
  materiaAtual=escolherMateriaComHistorico();
  if(materiaAtual) timerMateria.value=materiaAtual;
  endTime = new Date(Date.now() + totalSeconds*1000);
  iniciarContagem();
  salvarDados();
}

document.getElementById('startBtn').addEventListener('click',iniciarTimer);
document.getElementById('pauseBtn').addEventListener('click',()=>{ clearInterval(interval); mostrarModal(); salvarDados(); });
document.getElementById('resumeBtn').addEventListener('click',()=>{
  esconderModal();
  if(remainingSeconds>0){
    endTime = new Date(Date.now() + remainingSeconds*1000);
    iniciarContagem();
  }
  salvarDados();
});
document.getElementById('stopBtn').addEventListener('click',()=>{ clearInterval(interval); remainingSeconds=0; updateDisplay(); mostrarModal(); salvarDados(); });

window.onload = () => {
  carregarDados();
  updateDisplay();
  atualizarHistoricoRevisao(); 
};
</script>
</body>
</html>

-----------------------------------------------------------------------------------------

<!DOCTYPE html>
<html lang="pt-BR">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Timer com Histórico e Revisões - Drag & Drop</title>
<style>
  /* Corpo principal */
  body { 
    font-family: Arial, sans-serif; 
    background-color: #121212; /* fundo preto estilo chat */
    color: #f1f1f1; /* texto claro para contraste */
    display:flex; 
    flex-direction:column; 
    justify-content:center; 
    align-items:center; 
    gap:20px; 
  }

  /* Blocos principais */
  .bloco { 
    background:#1e1e1e; /* bloco escuro */
    padding:15px; 
    border-radius:10px; 
    box-shadow:0 4px 8px rgba(0,0,0,0.5); 
    width:350px; 
    display:flex; 
    flex-direction:column; 
    gap:5px; 
    cursor:move; 
    transition: box-shadow 0.3s, transform 0.2s;
  }
  .bloco:hover {
    box-shadow: 0 8px 16px rgba(0,0,0,0.7);
    transform: scale(1.02);
  }

  /* Inputs e selects */
  input[type="text"], select, input[type="number"], textarea { 
    padding:10px; 
    font-size:16px; 
    border:1px solid #333; 
    border-radius:5px; 
    width:100%; 
    box-sizing:border-box; 
    background:#2a2a2a;
    color:#f1f1f1;
  }

  /* Botões */
  button { 
    padding:5px 10px; 
    background-color:#007BFF; /* azul moderno */
    color:white; 
    border:none; 
    border-radius:5px; 
    font-size:14px; 
    cursor:pointer; 
    transition: background-color 0.3s, transform 0.2s; 
  }
  button:hover { 
    background-color:#0056b3; 
    transform: scale(1.05);
  }

  /* Itens de matérias, histórico e revisões */
  .materia-item, .historico-item, .revisao-hoje-item { 
    display:flex; 
    flex-direction:column; 
    justify-content:space-between; 
    padding:10px; 
    border-bottom:1px solid #333; 
    border-radius:8px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.3);
    transition: box-shadow 0.3s, transform 0.2s, background-color 0.2s;
    background:#2a2a2a;
    color:#f1f1f1;
  }
  .materia-item:hover, .historico-item:hover, .revisao-hoje-item:hover {
    box-shadow: 0 4px 12px rgba(0,0,0,0.6);
    transform: scale(1.02);
    background-color: #333;
  }

  /* Botões de matérias */
  .materia-buttons button { 
    margin-left:5px; 
    padding:3px 8px; 
    font-size:12px; 
  }

  /* Item selecionado */
  .selected { 
    background-color:#444; 
    border-radius:5px; 
  }

  /* Container de revisões */
  .revisao-container { 
    display:none; 
    flex-direction:column; 
    gap:5px; 
    margin-top:10px; 
    width:100%; 
  }

  /* Timer */
  .timer-item { 
    font-size:14px; 
    font-weight:bold; 
    margin-top:5px; 
  }
  .timer-buttons { 
    display:flex; 
    gap:5px; 
    margin-top:5px; 
  }

  /* Dificuldade */
  .dificuldade-container { 
    display:flex; 
    flex-direction:column; 
    gap:5px; 
    margin-top:5px; 
  }

  /* Scroll interno estilizado para revisões de hoje */
  #revisoesHojeList {
    max-height: 200px; /* ajuste conforme necessário */
    overflow-y: auto;
    background:#1e1e1e;
    border-radius:5px;
    padding:5px;
  }
  #revisoesHojeList::-webkit-scrollbar {
    width: 8px;
  }
  #revisoesHojeList::-webkit-scrollbar-thumb {
    background-color: #007BFF; /* cor do scroll azul */
    border-radius: 4px;
  }
  #revisoesHojeList::-webkit-scrollbar-track {
    background: #2a2a2a;
    border-radius: 4px;
  }

  /* Cores por dificuldade (opcional, adicionar classes dif1, dif5, dif10 nos itens) */
  .dif1 { background-color:#155724; }  /* verde escuro */
  .dif5 { background-color:#856404; }  /* amarelo escuro */
  .dif10 { background-color:#721c24; } /* vermelho escuro */
</style>

</head>
<body>

<div id="editor">

  <!-- BLOCO 1: ADICIONAR MATÉRIAS -->
  <div class="bloco" id="blocoAdicionar">
    <input type="text" id="materiaInput" placeholder="Digite a matéria" />
    <label for="peso">Peso:</label>
    <select id="peso">
      <option value="1">1</option>
      <option value="2">2</option>
      <option value="3">3</option>
      <option value="4">4</option>
      <option value="5">5</option>
    </select>
    <button id="addBtn">Adicionar</button>
    <div class="materias-list" id="materiasList"></div>
  </div>

  <!-- BLOCO 2: TIMER PRINCIPAL -->
  <div class="bloco" id="blocoTimer">
    <div class="time-input">
      <label for="minutes">Minutos:</label>
      <input type="number" id="minutes" min="10" step="10" value="10">
    </div>
    <div class="timer-container" style="display:flex; gap:10px; align-items:center;">
      <div class="timer" id="timer">00:00</div>
      <select id="timerMateria">
        <option value="">Selecionar matéria</option>
      </select>
    </div>
    <div class="controls" style="display:flex; gap:10px;">
      <button id="startBtn">Iniciar</button>
      <button id="pauseBtn">Pausar</button>
      <button id="resumeBtn">Continuar</button>
      <button id="stopBtn">Finalizar</button>
    </div>
  </div>

  <!-- BLOCO 3: MODAL DE REVISÃO -->
  <div class="bloco" id="blocoRevisaoModal">
    <div id="revisaoModal" class="revisao-container">
      <textarea id="mensagemRevisao" placeholder="Onde você parou..." rows="3"></textarea>
      <label><input type="checkbox" id="marcarRevisao"> Marcar revisão futura</label>
      <button id="salvarRevisao">Salvar</button>
    </div>
  </div>

  <!-- BLOCO 4: HISTÓRICO ORIGINAL -->
  <div class="bloco" id="blocoHistorico"> 
    <h3>Histórico de Estudo</h3>
    <div class="historico-list" id="historicoList"></div>
  </div>

  <!-- BLOCO 5: REVISÕES DE HOJE -->
  <div class="bloco" id="blocoRevisoesHoje">
    <h3>Revisões de hoje</h3>
    <div class="revisoes-hoje-list" id="revisoesHojeList"></div>
  </div>

</div>

<!-- BLOCO 6: HISTÓRICO DAS REVISÕES -->
<div class="bloco" id="blocoHistoricoRevisao">
  <h3>Histórico da Revisão</h3>
  <div class="historico-revisao-list" id="historicoRevisaoList"></div>
</div>
<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
<script>
  new Sortable(editor, {
    animation: 150,
    handle: '.bloco',
    ghostClass: 'sortable-ghost'
  });
</script>

<script>
const addBtn = document.getElementById('addBtn');
const materiasList = document.getElementById('materiasList');
const timerMateria = document.getElementById('timerMateria');
const historicoList = document.getElementById('historicoList');
const revisaoModal = document.getElementById('revisaoModal');
const mensagemRevisao = document.getElementById('mensagemRevisao');
const marcarRevisao = document.getElementById('marcarRevisao');
const salvarRevisao = document.getElementById('salvarRevisao');
const revisoesHojeList = document.getElementById('revisoesHojeList');
const historicoRevisaoList = document.getElementById('historicoRevisaoList');


let materias = [];
let materiaAtual = null;
let totalSeconds=0;
let remainingSeconds=0;
let interval=null;
let endTime=null; 

/* ===== LOCALSTORAGE ===== */
function salvarDados() {
  const dados = { materias, materiaAtual, totalSeconds, remainingSeconds, endTime };
  localStorage.setItem("estudoData", JSON.stringify(dados));
}

function carregarDados() {
  const dadosStr = localStorage.getItem("estudoData");
  if (!dadosStr) return;
  const dados = JSON.parse(dadosStr);

  materias = dados.materias || [];
  materiaAtual = dados.materiaAtual || null;
  totalSeconds = dados.totalSeconds || 0;
  remainingSeconds = dados.remainingSeconds || 0;
  endTime = dados.endTime || null;

  reconstruirListaMaterias();
  updateTimerOptions();
  atualizarHistorico();
  atualizarRevisoesHoje();

  if(endTime){
    const diff = Math.floor((new Date(endTime).getTime() - Date.now()) / 1000);
    if(diff > 0){
      remainingSeconds = diff;
      iniciarContagem();
    } else {
      remainingSeconds = 0;
      updateDisplay();
      mostrarModal();
    }
  }
}

/* ===== RECONSTRUIR LISTA VISUAL DAS MATÉRIAS ===== */
function reconstruirListaMaterias(){
  materiasList.innerHTML = '';
  materias.forEach(m => {
    const item = document.createElement('div');
    item.className = 'materia-item';
    const info = document.createElement('span');
    info.textContent = `${m.nome} (Peso: ${m.peso})`;

    const buttonsDiv = document.createElement('div');
    const editBtn = document.createElement('button');
    editBtn.textContent = 'Editar';
    editBtn.onclick = () => {
      const novoNome = prompt('Editar matéria:', m.nome);
      const novoPeso = parseInt(prompt('Editar peso:', m.peso), 10);
      if(novoNome && novoPeso){
        info.textContent = `${novoNome} (Peso: ${novoPeso})`;
        const idx = materias.findIndex(mat => mat.nome === m.nome);
        materias[idx] = { nome: novoNome, peso: novoPeso, sessoes: materias[idx].sessoes || [] };
        updateTimerOptions();
        salvarDados();
      }
    };

    const delBtn = document.createElement('button');
    delBtn.textContent = 'Excluir';
    delBtn.onclick = () => {
      materias = materias.filter(mat => mat.nome !== m.nome);
      reconstruirListaMaterias();
      updateTimerOptions();
      atualizarHistorico();
      atualizarRevisoesHoje();
      
      salvarDados();
    };

    buttonsDiv.appendChild(editBtn);
    buttonsDiv.appendChild(delBtn);
    item.appendChild(info);
    item.appendChild(buttonsDiv);
    materiasList.appendChild(item);
  });
}

/* ===== ADICIONAR MATÉRIAS ===== */
addBtn.addEventListener('click', () => {
  const nome = document.getElementById('materiaInput').value.trim();
  const peso = parseInt(document.getElementById('peso').value, 10);
  if (!nome) return;

  const novaMateria = { nome, peso, sessoes: [] };
  materias.push(novaMateria);
  reconstruirListaMaterias();
  updateTimerOptions();
  document.getElementById('materiaInput').value = '';
  salvarDados();
});

/* ===== FUNÇÕES AUXILIARES ===== */
function updateTimerOptions() {
  timerMateria.innerHTML = '<option value="">Selecionar matéria</option>';
  materias.forEach(m => {
    const option = document.createElement('option');
    option.value = m.nome;
    option.text = `${m.nome} (Peso: ${m.peso})`;
    timerMateria.appendChild(option);
  });
}

function updateDisplay(){
  let mins=String(Math.floor(remainingSeconds/60)).padStart(2,'0');
  let secs=String(remainingSeconds%60).padStart(2,'0');
  document.getElementById('timer').textContent=`${mins}:${secs}`;
}

function mostrarModal(){ revisaoModal.style.display='flex'; }
function esconderModal(){ revisaoModal.style.display='none'; }

/* ===== SALVAR REVISÃO ===== */
function salvarRevisaoFunc(){
  if(!materiaAtual) return;
  const materiaObj = materias.find(m=>m.nome===materiaAtual);
  if(!materiaObj) return;

  const agora = new Date();
  const sessao = {
    nomeMateria: materiaObj.nome,
    horaTermino: new Date(Date.now() - (remainingSeconds*1000)).toLocaleTimeString(),
    anotacao: mensagemRevisao.value.trim(),
    datasRevisao: []
  };

  // Datas de revisão: 0,1,15,30,45 dias
  const dias = [0,1,15,30,45];
  dias.forEach(d => {
    sessao.datasRevisao.push(new Date(agora.getTime() + d*24*60*60*1000).toLocaleDateString());
  });

  if(!materiaObj.sessoes) materiaObj.sessoes=[];
  materiaObj.sessoes.push(sessao);

  atualizarHistorico();
  atualizarRevisoesHoje();
  mensagemRevisao.value='';
  marcarRevisao.checked=false;
  esconderModal();
  salvarDados();
}

salvarRevisao.addEventListener('click', salvarRevisaoFunc);

/* ===== HISTÓRICO ===== */
function atualizarHistorico(){
  historicoList.innerHTML = '';
  materias.forEach(m => {
    if(m.sessoes){
      m.sessoes.forEach(s=>{
        const div = document.createElement('div');
        div.className = 'historico-item';
        div.innerHTML=`
          <strong>Matéria:</strong> ${s.nomeMateria} <br>
          <strong>Horário de término:</strong> ${s.horaTermino} <br>
          <strong>Anotação:</strong> ${s.anotacao} <br>
          <strong>Datas de revisão:</strong> ${s.datasRevisao.join(', ')}
        `;
        historicoList.prepend(div);
      });
    }
  });
}
/* ===== HISTÓRICO DA REVISÃO (NOVO) ===== */
function atualizarHistoricoRevisao(){
  historicoRevisaoList.innerHTML = '';
  const historicoRevisoes = JSON.parse(localStorage.getItem("historicoRevisoes") || "[]");

  historicoRevisoes.forEach(r=>{
    const div = document.createElement('div');
    div.className = 'historico-item';
    div.innerHTML = `
      <strong>Matéria:</strong> ${r.materia} <br>
      <strong>Horário:</strong> ${r.horario} <br>
      <strong>Anotação:</strong> ${r.anotacao || '-'} <br>
      <strong>Data:</strong> ${r.data} <br>
      <strong>Dificuldade:</strong> ${r.dificuldade} <br>
      <strong>Acertos:</strong> ${r.acertos}
    `;
    historicoRevisaoList.prepend(div);
  });
}

/* ===== REVISÕES DE HOJE COM TIMER + AVALIAÇÃO ===== */
function atualizarRevisoesHoje() {
  const hoje = new Date().toLocaleDateString(); // mantendo o mesmo formato que você usa hoje
  revisoesHojeList.innerHTML = '';

  materias.forEach(m => {
    if (m.sessoes) {
      m.sessoes.forEach(s => {
        if (Array.isArray(s.datasRevisao) && s.datasRevisao.includes(hoje)) {
          const item = document.createElement('div');
          item.className = 'revisao-hoje-item';

          // ID único do timer
          const timerId = 'timer_' + Math.random().toString(36).substr(2,9);

          item.innerHTML = `
            <strong>Matéria:</strong> ${s.nomeMateria} <br>
            <strong>Horário de término:</strong> ${s.horaTermino} <br>
            <strong>Anotação:</strong> ${s.anotacao || '-'} <br>
            <strong>Data da revisão:</strong> ${hoje} <br>
            <div class="timer-item" id="${timerId}">00:00</div>
            <div class="timer-controls">
              <input type="number" class="timer-minutos" min="1" value="10" style="width:60px;">
              <button class="start-item-btn">Iniciar</button>
              <button class="stop-item-btn">Finalizar</button>
            </div>
            <div class="dificuldade-container" style="display:none;">
              <label>Dificuldade:
                <select class="select-dificuldade">
                  ${Array.from({length:10}, (_,i)=>`<option value="${i+1}">${i+1}</option>`).join('')}
                </select>
              </label>
              <label>Acertos:
                <select class="select-acertos">
                  ${Array.from({length:30}, (_,i)=>`<option value="${i+1}">${i+1}</option>`).join('')}
                </select>
              </label>
              <button class="salvar-revisao-btn">Salvar</button>
            </div>
          `;

          revisoesHojeList.appendChild(item);

          // ----- Timer individual -----
          let itemInterval = null;
          let remainingItemSeconds = 0;

          const display = document.getElementById(timerId);
          const startBtn = item.querySelector('.start-item-btn');
          const stopBtn = item.querySelector('.stop-item-btn');
          const inputMin = item.querySelector('.timer-minutos');

          function updateItemDisplay() {
            let mins = String(Math.floor(remainingItemSeconds/60)).padStart(2,'0');
            let secs = String(remainingItemSeconds%60).padStart(2,'0');
            display.textContent = `${mins}:${secs}`;
          }

          startBtn.addEventListener('click', ()=>{
            remainingItemSeconds = parseInt(inputMin.value,10) * 60;
            updateItemDisplay();
            clearInterval(itemInterval);
            itemInterval = setInterval(()=>{
              if (remainingItemSeconds > 0) {
                remainingItemSeconds--;
                updateItemDisplay();
              } else {
                clearInterval(itemInterval);
                alert(`Timer da matéria "${s.nomeMateria}" finalizado!`);
              }
            }, 1000);
          });

          // ----- “Finalizar” agora mostra os dropdowns -----
          const avaliacaoDiv = item.querySelector('.dificuldade-container');
          const salvarBtn = item.querySelector('.salvar-revisao-btn');

          stopBtn.addEventListener('click', ()=>{
            clearInterval(itemInterval);
            remainingItemSeconds = 0;
            updateItemDisplay();
            avaliacaoDiv.style.display = 'flex';
          });

          // ----- Salvar no Histórico da Revisão -----
          salvarBtn.addEventListener('click', ()=>{
            const dificuldade = item.querySelector('.select-dificuldade').value;
            const acertos = item.querySelector('.select-acertos').value;

            const revisaoData = {
              materia: s.nomeMateria,
              horario: s.horaTermino,
              anotacao: s.anotacao || '',
              data: hoje,
              dificuldade,
              acertos
            };

            // salva/atualiza no localStorage
            const historicoRevisoes = JSON.parse(localStorage.getItem('historicoRevisoes') || '[]');
            historicoRevisoes.push(revisaoData);
            localStorage.setItem('historicoRevisoes', JSON.stringify(historicoRevisoes));

            // remove a data 'hoje' desta sessão para ela não reaparecer
            s.datasRevisao = (s.datasRevisao || []).filter(d => d !== hoje);
            salvarDados();

            // atualiza a UI
            atualizarHistoricoRevisao();
            item.remove();
          });
        }
      });
    }
  });
}

/* ===== TIMER PRINCIPAL ===== */
function iniciarContagem(){
  clearInterval(interval);
  updateDisplay();
  interval=setInterval(()=>{
    if(remainingSeconds>0){
      remainingSeconds--;
      updateDisplay();
      salvarDados();
    } else {
      clearInterval(interval);
      mostrarModal();
      salvarDados();
    }
  },1000);
}

function escolherMateriaComHistorico() {
  if(materias.length===0) return null;
  const k=2;
  const pesosAjustados=materias.map(m=>m.peso*(1+(m.sessoes?m.sessoes.length:0)/k));
  const somaPesos = pesosAjustados.reduce((a,b)=>a+b,0);
  const rand = Math.random() * somaPesos;
  let acumulado =0;
  for(let i=0;i<materias.length;i++){
    acumulado+=pesosAjustados[i];
    if(rand<=acumulado){
      return materias[i].nome;
    }
  }
  return materias[0].nome;
}

function iniciarTimer(){
  let minutes=parseInt(document.getElementById('minutes').value,10);
  totalSeconds=minutes*60;
  remainingSeconds=totalSeconds;
  materiaAtual=escolherMateriaComHistorico();
  if(materiaAtual) timerMateria.value=materiaAtual;
  endTime = new Date(Date.now() + totalSeconds*1000);
  iniciarContagem();
  salvarDados();
}

document.getElementById('startBtn').addEventListener('click',iniciarTimer);
document.getElementById('pauseBtn').addEventListener('click',()=>{ clearInterval(interval); mostrarModal(); salvarDados(); });
document.getElementById('resumeBtn').addEventListener('click',()=>{
  esconderModal();
  if(remainingSeconds>0){
    endTime = new Date(Date.now() + remainingSeconds*1000);
    iniciarContagem();
  }
  salvarDados();
});
document.getElementById('stopBtn').addEventListener('click',()=>{ clearInterval(interval); remainingSeconds=0; updateDisplay(); mostrarModal(); salvarDados(); });

window.onload = () => {
  carregarDados();
  updateDisplay();
  atualizarHistoricoRevisao(); 
};
</script>
</body>
</html>
